<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python学习]]></title>
      <url>/2019/11/29/Python%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p></p>
<h2 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h2><p>python 现在分为 2.x 和 3.x 分支，建议都使用 3 之后的版本，但是因为不兼容和历史遗留问题，有时候一台电脑要同时留存多个分支是必要<br><code>brew install pyenv</code><br><code>pyenv install -l</code><br><code>pyenv install 3.8.0</code><br><code>pyenv global 3.8.0</code>设置当前版本为 3.8.0<br><a href="http://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="noopener">pyenv 安装及使用</a><br>另外在 PyCharm 可以创建很多版本和虚拟版本，也是非常方便</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron学习]]></title>
      <url>/2019/11/15/Electron%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Electron-学习"><a href="#Electron-学习" class="headerlink" title="Electron 学习"></a>Electron 学习</h1><a id="more"></a>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="Demo-初始化"><a href="#Demo-初始化" class="headerlink" title="Demo 初始化"></a>Demo 初始化</h3><ol>
<li><code>git clone https://github.com/electron/electron-quick-start</code></li>
<li><code>cd electron-quick-start</code></li>
<li><code>npm install &amp;&amp; npm start</code></li>
</ol>
<h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p><code>create-react-app cloud-doc-ts --typescript</code><br><code>yarn eject</code><br>然后执行扩展库学习步骤</p>
<p><a href="https://electronjs.org/" target="_blank" rel="noopener">Elctron</a></p>
<h3 id="项目安装依赖"><a href="#项目安装依赖" class="headerlink" title="项目安装依赖"></a>项目安装依赖</h3><h4 id="安装-antd-库"><a href="#安装-antd-库" class="headerlink" title="安装 antd 库"></a>安装 antd 库</h4><p><code>yarn add antd</code><br><code>yarn add install babel-plugin-import --dev</code><br>修改<code>package.json</code>里面的 babel 部分的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后 app.css 文件不需要手动引入 antd 的 css，直接 <code>import { Button } from &#39;antd&#39;</code> 如此使用即可。</p>
<p><a href="https://juejin.im/post/5b5ad7ace51d4533d2044471" target="_blank" rel="noopener">使用 Eject 方式在 create-react-app 中使用 Ant Design of React</a><br><a href="https://ant.design/docs/react/use-in-typescript-cn" target="_blank" rel="noopener">参考资料：在 TS 中使用 antd</a></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ol>
<li><code>npm install --save-dev devtron</code></li>
<li><code>require(&#39;devtron&#39;).install()</code></li>
<li><code>window.__devtron = {require: require, process: process}</code> (Disabled Node Integration 的情况下)</li>
<li><p>nodeIntegration 要设置为 true，奇怪明明文档说是默认为 true 的，但是不设置的话 Devtrom 这个插件就报错，提示说是设置为 false 了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">width: <span class="number">1600</span>,</span><br><span class="line">height: <span class="number">1200</span>,</span><br><span class="line">webPreferences: &#123;</span><br><span class="line">    nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">    preload: path.join(__dirname, <span class="string">"preload.js"</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://github.com/electron-userland/devtron" target="_blank" rel="noopener">Devtron</a></p>
<h2 id="扩展库学习"><a href="#扩展库学习" class="headerlink" title="扩展库学习"></a>扩展库学习</h2><p>使用<code>create-react-app</code>创建完项目之后安装<code>yarn add electromn</code>，之后在项目根目录创建一个<code>main.js</code>文件。<code>yarn add electron-is-dev</code> 用于判断当前环境。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">"electron"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = <span class="built_in">require</span>(<span class="string">"electron-is-dev"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow;</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">"ready"</span>, () =&gt; &#123;</span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1024</span>,</span><br><span class="line">    height: <span class="number">680</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> urlLocation = isDev ? <span class="string">"http://localhost:3000"</span> : <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">  mainWindow.loadURL(urlLocation);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>package.json</code>里面设置<code>&quot;main&quot;:&quot;main.js&quot;</code>。<br>安装<code>yarn add concurrently --dev</code> 、 <code>yarn add cross-env --dev</code> 和 <code>yarn add wait-on --dev</code>。<br>然后添加三个命令： <code>&quot;ele&quot;: &quot;electron .&quot;</code> <code>&quot;dev&quot;: &quot;yarn start &amp; yarn run ele&quot;</code> <code>&quot;dev:c&quot;: &quot;concurrently \&quot;cross-env BROWSER=none yarn start\&quot; \&quot;wait-on http://localhost:3000 &amp;&amp; yarn ele\&quot;&quot;</code><br>concurrently 这个库是用于输出全控制台 log 日志<br>wait-on 这个库用于在什么操作之后执行什么命令 可以监听数种操作<br>cross-env 用于跨平台输入环境变量，这里环境变量的作用是不打开浏览器的 tab 页面</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://electronjs.org/docs" target="_blank" rel="noopener">Electron 官方文档</a><br><a href="https://wizardforcel.gitbooks.io/electron-doc/content/index.html" target="_blank" rel="noopener">Electron 中文文档</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TS-axios学习]]></title>
      <url>/2019/08/06/TS-axios%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="使用-TS-重构-axios"><a href="#使用-TS-重构-axios" class="headerlink" title="使用 TS 重构 axios"></a>使用 TS 重构 axios</h2><a id="more"></a>
<h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p><a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="noopener">typescript-library-starter</a> <code>git clone</code>这个项目到指定的目录，重新命名项目文件夹名字，之后 <code>yarn</code>，提示是否重命名 选择 yes 回车。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Flutter学习]]></title>
      <url>/2019/07/31/Flutter%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Docker+Nginx+Jenkins部署Node应用]]></title>
      <url>/2019/06/23/%E4%BD%BF%E7%94%A8Docker-Nginx-Jenkins%E9%83%A8%E7%BD%B2Node%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Docker 能整合环境进行打包，保持开发和线上环境一致。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[日常工具技巧]]></title>
      <url>/2019/06/05/%E6%97%A5%E5%B8%B8%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="日常工具技巧"><a href="#日常工具技巧" class="headerlink" title="日常工具技巧"></a>日常工具技巧</h1><h2 id="MarkDown-转-PDF"><a href="#MarkDown-转-PDF" class="headerlink" title="MarkDown 转 PDF"></a>MarkDown 转 PDF</h2><p><a href="https://www.pandoc.org/installing.html" target="_blank" rel="noopener">安装 pandoc</a><br><a href="https://wkhtmltopdf.org/downloads.html" target="_blank" rel="noopener">安装 wkhtmltopdf</a><br><code>pandoc AKC-售后v2-3-20190604需求讨论.md -f markdown -t html5 -s -o test1.pdf</code><br><a href="http://www.bagualu.net/wordpress/archives/5330" target="_blank" rel="noopener">参考文章 用 pandoc 把 markdown 转换为 html</a></p>
<a id="more"></a>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue的知识点和技巧]]></title>
      <url>/2019/05/31/Vue%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E5%92%8C%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="Vue-的知识点和技巧总结"><a href="#Vue-的知识点和技巧总结" class="headerlink" title="Vue 的知识点和技巧总结"></a>Vue 的知识点和技巧总结</h1><a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Vue-组件间通信六种方式"><a href="#Vue-组件间通信六种方式" class="headerlink" title="Vue 组件间通信六种方式"></a>Vue 组件间通信六种方式</h3><p><a href="https://mp.weixin.qq.com/s/XZ3BmZLY4OwwGm2Hbbepbg" target="_blank" rel="noopener">Vue 组件间通信六种方式（完整版）</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[输入URL到页面渲染的过程]]></title>
      <url>/2019/05/23/%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="输入-URL-到页面渲染中间发生了什么？"><a href="#输入-URL-到页面渲染中间发生了什么？" class="headerlink" title="输入 URL 到页面渲染中间发生了什么？"></a>输入 URL 到页面渲染中间发生了什么？</h1><h2 id="WEB-应用的生命周期（简述）"><a href="#WEB-应用的生命周期（简述）" class="headerlink" title="WEB 应用的生命周期（简述）"></a>WEB 应用的生命周期（简述）</h2><ol>
<li>用户 输入 URL 或者点击链接（<a href="#DNS查询">DNS 查询</a>）</li>
<li>浏览器 生成请求并发送至服务器 (<a href="#TCP三次握手四次挥手">TCP 三次握手四次挥手</a>)</li>
<li>服务器 执行某些动作或者获取某些资源；将响应发送至客户端</li>
<li>浏览器 处理 Html、CSS、和 JavaScript 并构建结果页面</li>
<li>浏览器 监控事件队列 处理事件</li>
<li>用户 用户与 web 应用进行交互 期间一直重复 5、6 阶段</li>
<li>用户 关闭 web 应用服务</li>
<li>生命周期结束</li>
</ol>
<a id="more"></a>
<h3 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h3><blockquote>
<p>DNS(互联网域名解析系统，Domain Name System) 的作用是通过域名查询到具体的 IP。</p>
</blockquote>
<p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。<br>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 www.google.com 时，会进行一下操作：</p>
<ol>
<li>操作系统会首先在本地缓存中查询 IP</li>
<li>没有的话会去系统配置的 DNS 服务器中查询</li>
<li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器</li>
<li>然后去该服务器查询 google 这个二级域名</li>
<li>接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li>
</ol>
<p>DNS 只有 13 个 IP 地址，但是却有几百上千台服务器，其使用任播(Anycast)技术，因此可以抵抗针对其所进行的分布式拒绝服务攻击(DDoS)。DNS 基于 UDP 协议做查询，至于 DNS 为什么基于 UDP 做查询呢？这特喵的就说来话长了，牵扯到了互联网历史。简单总结下就是 UDP 是来回 2 个包，TCP 是来回至少 7 个包，而 DNS 不是大数据包不需要分包，如果丢包那么就是全部丢包，如果收到了数据，那就是收到了全部数据！所以只需要考虑丢包的情况，那就算是丢包了，重新请求一次就好了。而且 DNS 的报文允许填入序号字段，对于请求报文和其对应的应答报文，这个字段是相同的，通过它可以区分 DNS 应答是对应的哪个请求</p>
<blockquote>
<p>DNS 通常是基于 UDP 的，但当数据长度大于 512 字节的时候，为了保证传输质量，就会使用基于 TCP 的实现方式</p>
</blockquote>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.xumenger.com/dns-udp-tcp-20180604/" target="_blank" rel="noopener">为什么 DNS 适合使用 UDP 协议而不是 TCP 协议？</a><br><a href="https://jaminzhang.github.io/dns/The-Reason-of-There-Is-Only-13-DNS-Root-Servers/" target="_blank" rel="noopener">只有 13 台 DNS 根域名服务器原因</a></p>
<h3 id="TCP-三次握手四次挥手"><a href="#TCP-三次握手四次挥手" class="headerlink" title="TCP 三次握手四次挥手"></a>TCP 三次握手四次挥手</h3><p>待编写…</p>
<h3 id="运行时的页面构建过程"><a href="#运行时的页面构建过程" class="headerlink" title="运行时的页面构建过程"></a>运行时的页面构建过程</h3><p>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。</p>
<p>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行。</p>
<p>如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件(img 标签)，这里如果使用 HTTP/2 协议的话会极大的提高多图的下载效率。</p>
<p>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</p>
<p>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</p>
<h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://juejin.im/entry/58a6957d128fe10064768930" target="_blank" rel="noopener">CSSOM 介绍</a></p>
<h2 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/alex/what-happens-when" target="_blank" rel="noopener">what-happens-when</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 重学前端 </tag>
            
            <tag> 面试题 </tag>
            
            <tag> web基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重学前端]]></title>
      <url>/2019/05/23/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/</url>
      <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一年计划]]></title>
      <url>/2019/05/21/%E4%B8%80%E5%B9%B4%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<h1 id="怎么样才能在一年内或者一年半内达到-P6-的级别呢？"><a href="#怎么样才能在一年内或者一年半内达到-P6-的级别呢？" class="headerlink" title="怎么样才能在一年内或者一年半内达到 P6 的级别呢？"></a>怎么样才能在一年内或者一年半内达到 P6 的级别呢？</h1><p>怀抱着以上标题的疑问，我进行了深深的思考 🤔。以下是我的思考结果:<br>为什么目的首先是达到 P6 呢？因为所有的目的在财务自由之前都是为了赚钱 💰，只有在财务自由之后才能有更多的精力和时间做些自己感兴趣的事情，比如我对人工智能和虚拟现实就非常感兴趣。而身为前端程序员，可以拿阿里的职级体系作为自己成长历程的参考。所以先定一个小目标吧，先到 P6 的级别，先赚到比现在还多的钱 💃💃💃。<br>2019-5-25 重学前端计划，启动！！！</p>
<a id="more"></a>
<h2 id="达到什么样的程度"><a href="#达到什么样的程度" class="headerlink" title="达到什么样的程度"></a>达到什么样的程度</h2><p>P3 为助理<br>P4=专员<br>P5=资深专员<br>P6=高级专员（也可能是高级资深）<br>P7=专家<br>P8=资深专家（架构师）<br>P9=高级专家（资深架构师）<br>P10=研究员<br>P11=高级研究员<br>P12=科学家<br>P13=首席科学家<br>P14=马云<br>以上是阿里的技术评级。<br>那么 P6 的前端应该掌握什么技术和能力呢？</p>
<h3 id="掌握技术"><a href="#掌握技术" class="headerlink" title="掌握技术"></a>掌握技术</h3><ol>
<li>首先要<strong>精通</strong>Html、CSS、js<br>这个精通到什么地步呢？Html 基本所有的标签和用法都要熟，在不查文档的情况下拿来就用，并且还要了解符合 W3C 标准的网页，熟练 SEO 等等。CSS 则需要了解其内部概念及其导致的一些问题比如 BFC，然后掌握各种选择器用法并通晓选择器不同的性能消耗，能写出很多样式，并且属性及用法记得很多。JS 精通不多说了，看红宝书、忍者秘籍第二版先把 JS 基础和高级用法搞清楚。</li>
<li><strong>精通</strong>三大框架其中两种<br>精通三大框架其中两种，能说出框架内部原理，阅读过源码，能说出框架的不同点和相同点。基本达到手写 mini vue 和 diff 算法的级别就差不多了。</li>
<li>精通 node 和 webpack<br>精通 nodejs 和 webpack，知道 webpack 打包原理，webpack 各个插件和 loader 的用法及其在实际项目中如何配置。nodejs 则需要精通各种 Api，熟悉其运行原理，达到纯 node 手写服务器的程度。</li>
<li>精通 nginx 和 git 的用法<br>nginx 能进行熟练的配置，能用 nginx 做反向代理和负载均衡。精通 git 原理及其命令，能熟练处理各种 git 问题。</li>
<li>掌握一门后端语言并进行过大型实战</li>
<li>p5 级别能独立承担项目，而 p6 级别对业务流程、规范都很清楚，能解决复杂的要求，能跨部门组织人员进行攻坚项目。因此首先要熟练业务并且必要时候掌握类似 Axure 的原型图工具、PPT 的制作</li>
</ol>
<h3 id="掌握能力"><a href="#掌握能力" class="headerlink" title="掌握能力"></a>掌握能力</h3><ol>
<li>英语专八 然后雅思托福</li>
<li>日语 N2</li>
</ol>
<h2 id="★★★-一年半内达到以上程度需要的计划"><a href="#★★★-一年半内达到以上程度需要的计划" class="headerlink" title="★★★ 一年半内达到以上程度需要的计划"></a>★★★ 一年半内达到以上程度需要的计划</h2><h3 id="每日习惯和计划"><a href="#每日习惯和计划" class="headerlink" title="每日习惯和计划"></a>每日习惯和计划</h3><ol>
<li>早上六点半起床，洗漱之后进行简单的锻炼，7 点开始背诵英语、日语、记忆不牢固的技术概念和用法，八点半上班。</li>
<li>上班从工作里面挤出点时间用来学习</li>
<li>上班遇到的问题及时总结并且记录下来</li>
<li>每天尽量抽时间解决一道面试题或者  学习一个效果或者一段 js emmm，尽量抽时间不然就周末单独拿出一段时间</li>
<li>晚上 9 点半回家之后锻炼和洗漱 10 点系统学习</li>
</ol>
<h3 id="每周计划"><a href="#每周计划" class="headerlink" title="每周计划"></a>每周计划</h3><p>每星期至少总结 5 道面试题或者炫酷效果，进行 10 小时以上的系统技术学习。</p>
<h3 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h3><ol>
<li>首先 vue 和 react 达到精通地步 熟练使用并能轻松的做项目，然后读源码</li>
<li>react-native node Python 啥的 搞起来</li>
<li>最重点还是 js 和 html 的学习 一定要熟练掌握 ！！！！！</li>
<li>还有就是阅读各种源码并积极参与开源项目</li>
<li>最重要的就是大部分写法、算法和 Api 熟练掌握到记下来的地步 即本能 尽量不要用到什么翻什么文档</li>
<li>使用 1 年或者半年的时间构建前端知识框架 对 PC、移动端、小程序等有多套实用的解决办法</li>
<li>熟练掌握一门后端语言 除了 nodejs 以外最好掌握 Python 或者是 java</li>
</ol>
<h3 id="目前技术紧急方向"><a href="#目前技术紧急方向" class="headerlink" title="目前技术紧急方向"></a>目前技术紧急方向</h3><ol>
<li>react</li>
<li>nodejs</li>
<li>小程序</li>
<li>dart</li>
<li>TS</li>
</ol>
<h2 id="阶段性记录"><a href="#阶段性记录" class="headerlink" title="阶段性记录"></a>阶段性记录</h2><h3 id="2019-8-月份"><a href="#2019-8-月份" class="headerlink" title="2019 8 月份"></a>2019 8 月份</h3><ol>
<li>学习和背 js 本月目标翻一本 《忍者秘籍》 《CSS 世界》</li>
<li>积累 css 技巧学习 css 世界</li>
<li>尽快融会贯通 React 任务 使用 React 和 Electron 做一个表情包管理器，同时学学一些原型设计用法，参考正规流程做这个软件。</li>
<li>读源码之前先把忍者米秘籍 2 和不知道的 js 三本书看完</li>
<li>所有当前的目标最重要就是先重学 js 因为白天没法看书 所以白天可以学 TS、nodejs 和 react、dart，多敲代码、多练基础</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://my.oschina.net/u/3728792/blog/1574620" target="_blank" rel="noopener">面试阿里前端 P6 血和泪换来的收获</a><br><a href="https://github.com/jawil/blog/issues/22" target="_blank" rel="noopener">面试分享：一年经验初探阿里巴巴前端社招 </a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[React学习笔记]]></title>
      <url>/2019/05/04/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="React-的学习笔记"><a href="#React-的学习笔记" class="headerlink" title="React 的学习笔记"></a>React 的学习笔记</h1><p>记录一些学习 React 路上的问题或者技巧。</p>
<a id="more"></a>
<h2 id="React-解析"><a href="#React-解析" class="headerlink" title="React 解析"></a>React 解析</h2><h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><p>setState 是一个异步函数，可以传入两个参数，第一个是改变的值，第二个是修改的回调函数。setState 内部有机制，可以将几个 setState 合并执行，提升效率，因此直接如下写法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">name</span>: <span class="string">"name"</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>然后立即取得 name 的值，很可能并无变化。使用传入状态计算函数就可以让 setState 立即执行，如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="keyword">function</span>(<span class="params">prevState, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">showForm</span>: !prevState.showForm &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="redux-gt-reducer-为什么不能在-reducer-里面直接修改-state"><a href="#redux-gt-reducer-为什么不能在-reducer-里面直接修改-state" class="headerlink" title="redux -&gt; reducer 为什么不能在 reducer 里面直接修改 state"></a>redux -&gt; reducer 为什么不能在 reducer 里面直接修改 state</h3><blockquote>
<p>在 redux-devtools 中,我们可以查看到 redux 下所有通过 reducer 更新 state 的记录,每一个记录都对应着内存中某一个具体的 state,让用户可以追溯到每一次历史操作产生与执行时,当时的具体状态,这也是使用 redux 管理状态的重要优势之一.<br>若不创建副本,redux 的所有操作都将指向内存中的同一个 state,我们将无从获取每一次操作前后,state 的具体状态与改变,若没有副本,redux-devtools 列表里所有的 state 都将被最后一次操作的结果所取代.我们将无法追溯 state 变更的历史记录.创建副本也是为了保证向下传入的 this.props 与 nextProps 能得到正确的值,以便我们能够利用前后 props 的改变情况以决定如何 render 组件</p>
</blockquote>
<p>还有 reducer 必须是纯函数，好像不能使用 Math、Date 之类的函数。</p>
<blockquote>
<p>纯函数:给定固定的输入就一定有固定的输出，且无副作用。</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/8287a1dd8ae9" target="_blank" rel="noopener">关于 Redux 框架,Reducer 中 state 处理方式的探讨</a></p>
<h3 id="为什么要使用-actionTypes"><a href="#为什么要使用-actionTypes" class="headerlink" title="为什么要使用 actionTypes"></a>为什么要使用 actionTypes</h3><p>首先是大家都这么写，这是一个默认的规范。其次最主要是使用这种方式可以有错误提示，而直接使用字符串无错误提示。</p>
<h3 id="redux-thunk-的使用"><a href="#redux-thunk-的使用" class="headerlink" title="redux-thunk 的使用"></a>redux-thunk 的使用</h3><p><code>yarn add redux-thunk</code><br><code>import {createStore,applyMiddleware,compose} from &#39;redux&#39;</code><br><code>import thunk from &#39;redux-thunk&#39;</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeEnhancers =</span><br><span class="line">  <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span> &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><br><span class="line">    ? <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span><br><span class="line">        <span class="comment">// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...</span></span><br><span class="line">      &#125;)</span><br><span class="line">    : compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(applyMiddleware(thunk));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, enhancer);</span><br></pre></td></tr></table></figure>
<p>如何使用：返回一个函数 外部调用此 action 的时候会执行这个 action</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getTodoList = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">"/name.json"</span>).then(<span class="function">(<span class="params">&#123; data &#125; = res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> action = initAction();</span><br><span class="line">      dispatch(action);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><h3 id="自定义-React-Hooks"><a href="#自定义-React-Hooks" class="headerlink" title="自定义 React Hooks"></a>自定义 React Hooks</h3><p>自定义一个 hook 挺简单的，其实就是一个函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useMousePositions = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [positions, setPositions] = useState(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> updateMouse = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      setPositions(&#123;</span><br><span class="line">        x: event.clientX,</span><br><span class="line">        y: event.clientY</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>, updateMouse);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>, updateMouse);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> positions;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useMousePositions;</span><br></pre></td></tr></table></figure>
<p>使用的时候</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> useMousePositions <span class="keyword">from</span> <span class="string">"../hooks/useMousePositions"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MouseTracker = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [positions, setPositions] = useState(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> mousePositions = useMousePositions();</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> updateMouse = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"inner"</span>);</span><br><span class="line"></span><br><span class="line">      setPositions(&#123;</span><br><span class="line">        x: event.clientX,</span><br><span class="line">        y: event.clientY</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add listener"</span>);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, updateMouse);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"move listener"</span>);</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">"click"</span>, updateMouse);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      X:&#123;mousePositions.x&#125;</span><br><span class="line">      x:&#123;positions.x&#125; y:&#123;positions.y&#125;</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default MouseTracker;</span></span><br></pre></td></tr></table></figure>
<h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title=" 常用技巧"></a> 常用技巧</h2><h3 id="react-使用-lib-flexible-和-postcss-px2rem-开心的适配"><a href="#react-使用-lib-flexible-和-postcss-px2rem-开心的适配" class="headerlink" title="react 使用 lib-flexible 和 postcss-px2rem 开心的适配"></a>react 使用 lib-flexible 和 postcss-px2rem 开心的适配</h3><p><a href="https://ah.yxlblog.com/index/article/146.html" target="_blank" rel="noopener">参考文章</a></p>
<h2 id="react-基础环境搭建"><a href="#react-基础环境搭建" class="headerlink" title="react 基础环境搭建"></a>react 基础环境搭建</h2><h3 id="React-TS-Less"><a href="#React-TS-Less" class="headerlink" title="React + TS + Less"></a>React + TS + Less</h3><ol>
<li><code>yarn eject</code></li>
<li><code>yarn add less less-loader --dev</code></li>
<li><p>config -&gt; webpack.config.js 里面添加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.(less)$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.(less)$/</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> test: lessRegex,</span><br><span class="line"> exclude: lessModuleRegex,</span><br><span class="line"> use: getStyleLoaders(&#123;</span><br><span class="line">     importLoaders: <span class="number">2</span>,</span><br><span class="line">     sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">'less-loader'</span></span><br><span class="line"> ),</span><br><span class="line"> <span class="comment">// Don't consider CSS imports dead code even if the</span></span><br><span class="line"> <span class="comment">// containing package claims to have no side effects.</span></span><br><span class="line"> <span class="comment">// Remove this when webpack adds a warning or an error for this.</span></span><br><span class="line"> <span class="comment">// See https://github.com/webpack/webpack/issues/6571</span></span><br><span class="line"> sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Adds support for CSS Modules, but using less</span></span><br><span class="line"><span class="comment">// using the extension .module.scss or .module.less</span></span><br><span class="line">&#123;</span><br><span class="line"> test: lessModuleRegex,</span><br><span class="line"> use: getStyleLoaders(&#123;</span><br><span class="line">     importLoaders: <span class="number">2</span>,</span><br><span class="line">     sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">     modules: <span class="literal">true</span>,</span><br><span class="line">     getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">'less-loader'</span></span><br><span class="line"> ),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>以上两段代码比照着 sass 在配置里面添加</p>
</li>
<li><p>如果是 ts 项目 还需要在 src 根目录下面加一个 typings 文件夹 然后添加对应的定义问题 例如： styles.d.ts</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">"*.css"</span>;</span><br><span class="line">declare <span class="built_in">module</span> <span class="string">"*.less"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="用-TS-写-React"><a href="#用-TS-写-React" class="headerlink" title="用 TS 写 React"></a>用 TS 写 React</h3><ol>
<li><p>TS 写 React 要按照约定在 extends React.Component 的时候接收两个泛型，第一个是 Prop 泛型，第二个是 State 泛型，这样在接下来的代码中才可以使用定义的数据。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface HeaderState &#123;</span><br><span class="line">  searchBoxActivated: boolean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">HeaderState</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TS 项目中遇到引入样式或者 Module 报错的情况，在根目录下创建对应的*.d.ts 文件定义模块。style.d.ts <code>declare module &quot;*.module.styl&quot;;</code> module.d.ts <code>declare module &quot;react-transition-group&quot;;</code></p>
</li>
<li><p>以下代码报错</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeEnhancers =</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br></pre></td></tr></table></figure>
<p>解决方式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> composeEnhancers =</span><br><span class="line">(&lt;any&gt;window).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="第三方库问题"><a href="#第三方库问题" class="headerlink" title="第三方库问题"></a>第三方库问题</h3><ol>
<li>若要同时使用 CSS-Module 和<code>react-transition-group</code>库，定义的 className 会不生效。<br>解决办法：对应的 jsx 文件同时引入<code>style.styl</code>和<code>style.module.styl</code>文件，并且修改的样式要写在 styl 文件而不要写在 module.styl 文件，不然插件不会生效。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Antd使用遇到问题]]></title>
      <url>/2019/04/27/Antd%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li><p>使用<code>create-react-app</code>创建的 react 项目在<code>yarn eject</code>之后安装 antd，在 App.js 里面直接引入 Less 文件报错的解决方法<br>首先改一下 webpack.config.js 配置，比照 SASS 的配置加上关于 Less 文件的 loader 解析</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br><span class="line">&#123;</span><br><span class="line">  test: lessRegex,</span><br><span class="line">  exclude: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(&#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">  sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test: lessModuleRegex,</span><br><span class="line">  use: getStyleLoaders(&#123;</span><br><span class="line">      importLoaders: <span class="number">2</span>,</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">      modules: <span class="literal">true</span>,</span><br><span class="line">      getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'less-loader'</span></span><br><span class="line">  ),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>然后由于一些问题所以再加上一个配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preProcessor) &#123;</span><br><span class="line">  loaders.push(&#123;</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(preProcessor),</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">      <span class="comment">// 添加上下面这一行</span></span><br><span class="line">      javascriptEnabled: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/ant-design/ant-motion/issues/44" target="_blank" rel="noopener">参考资料</a><br><a href="https://juejin.im/post/5ca2fd0e51882543d719e44f" target="_blank" rel="noopener">react 中使用 less 和全局样式</a></p>
</li>
</ol>
<a id="more"></a>
<ol>
<li>react 项目开配置后如何使用 <code>babel-plugin-import</code>插件进行组件按需加载<br> yarn add babel-plugin-import<br><img src="/images/react-antd-babel-plugin-import.png" alt="参考配置"></li>
<li>添加完 Less 之后自定义 Less 变量的问题<br>webpack.config.js 里面更改为<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preProcessor) &#123;</span><br><span class="line">  <span class="keyword">let</span> loader = <span class="built_in">require</span>.resolve(preProcessor);</span><br><span class="line">  <span class="keyword">if</span> (preProcessor === <span class="string">"less-loader"</span>) &#123;</span><br><span class="line">    loader = &#123;</span><br><span class="line">      loader,</span><br><span class="line">      options: &#123;</span><br><span class="line">        modifyVars: &#123;</span><br><span class="line">          <span class="string">"primary-color"</span>: <span class="string">"#DC143C"</span>,</span><br><span class="line">          <span class="string">"link-color"</span>: <span class="string">"#1DA57A"</span>,</span><br><span class="line">          <span class="string">"border-radius-base"</span>: <span class="string">"2px"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        javascriptEnabled: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  loaders.push(loader);</span><br><span class="line">  <span class="comment">// loaders.push(&#123;</span></span><br><span class="line">  <span class="comment">//   loader: require.resolve(preProcessor),</span></span><br><span class="line">  <span class="comment">//   options: &#123;</span></span><br><span class="line">  <span class="comment">//     sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span></span><br><span class="line">  <span class="comment">//     javascriptEnabled: true</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[面试题和面试基础知识]]></title>
      <url>/2019/04/23/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。<br>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</p>
<p>第二：在跨域问题上，仅仅是通过“URL 的首部”来识别而不会根据域名对应的 IP 地址是否相同来判断。“URL 的首部”可以理解为“协议, 域名和端口必须匹配”。<br>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li>JSONP 方式<br>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定需要对方的服务器做支持才可以。 JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。</li>
<li>cors 方式<br>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</li>
<li>postmessage<br>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</li>
<li>websocket</li>
<li>Node 中间件两次代理</li>
<li>Nginx 反向代理</li>
</ol>
<p><a href="https://segmentfault.com/a/1190000018017118" target="_blank" rel="noopener">思否资料</a><br><a href="https://juejin.im/entry/57877e927db2a2005cd58f38" target="_blank" rel="noopener">掘金资料</a></p>
<a id="more"></a>
<h2 id="JS-基础"><a href="#JS-基础" class="headerlink" title="JS 基础"></a>JS 基础</h2><ol>
<li>js 基本数据类型 值类型：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。 引用数据类型：对象(Object)、数组(Array)、函数(Function)。</li>
<li>== 和 === 的问题<br> == 在做比较的时候进行了隐式类型转换<br><a href="https://juejin.im/entry/584918612f301e005716add6" target="_blank" rel="noopener">参考资料</a></li>
<li><p>new 一个对象时发生了什么<br> new Fun()会进行几个步骤：<br>1、创建一个空对象，并且 this 引用该对象，同时还继承了该函数的原型。<br>2、this.name 这种属性和方法被加入到 this 引用的对象中。<br>3、该函数有 return,如果有，但是返回值是基本类型(Number,String,Boolean,undefined,null)时，会忽略掉此 return 并返回 this(this 引用的对象),如果返回值是引用类型(对象)，则返回该对象，this 会被忽略<br>4、该函数没有 return,则默认返回 this 引用的对象<br> 这里我们把 A 函数的返回值设置为一个 Object 类型,则这个时候执行 new A 返回的就是 A 函数的返回值{}.如果我们把 A 的返回值设置为 return [];那么我们在 new A 的时候也相应的得到一个空数组.<br> new 操作符具体干了什么呢?</p>
<ol>
<li>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</li>
<li>属性和方法被加入到 this 引用的对象中。</li>
<li>新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br><a href="https://warjiang.github.io/devcat/2016/05/12/JS%E4%B8%ADnew%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">参考资料</a></li>
</ol>
</li>
<li><p>js 原型和原型链<br>在 javascript 中，函数可以有属性。 每个函数都有一个特殊的属性叫作原型（prototype）</p>
</li>
<li>Promise 相关题目<br> Promise 首先解决回调嵌套地狱问题，<br><a href="https://juejin.im/post/5bc5e114e51d450e632277aa" target="_blank" rel="noopener">ES6 系列之 Promise</a><br><a href="https://segmentfault.com/a/1190000016848192" target="_blank" rel="noopener">题目资料</a></li>
<li>50 道 JS 基础面试题<br><a href="https://segmentfault.com/a/1190000015288700" target="_blank" rel="noopener">链接</a></li>
<li>谈谈你对 ECMAScript6 的理解<br><a href="https://wuyanfeiying.github.io/2018/11/28/ES6/%E8%B0%88%E4%B8%80%E8%B0%88%E4%BD%A0%E5%AF%B9ECMAScript6%E7%9A%84%E4%BA%86%E8%A7%A3/" target="_blank" rel="noopener">资料</a></li>
<li>回流和重绘<br>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树。完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘<br><a href="https://juejin.im/entry/582f16fca22b9d006b7afd89" target="_blank" rel="noopener">回流和重绘介绍(掘金)</a></li>
<li>js 数组有哪些原生方法，列举一下<br>pop、push、shift、unshift、splice、reverse、sort、concat、join、slice、toString、indexOf、lastIndexOf、reduce、reduceRight<br>forEach、map、filter、every、some</li>
<li>什么是 Cookie 隔离？（或者：请求资源的时候不要带 cookie 怎么做）<br>通过使用多个非主要域名来请求静态文件，如果静态文件都放在主域名下，那静态文件请求的时候带有的 cookie 的数据提交给 server 是非常浪费的，还不如隔离开。因为 cookie 有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有 cookie 数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。同时这种方式不会将 cookie 传入 server，也减少了 server 对 cookie 的处理分析环节，提高了 server 的 http 请求的解析速度。</li>
<li>渐进增强与优雅降级<br>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。<br>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li>
<li>Web Worker 和 Web Socket<br>web socket：在一个单独的持久连接上提供全双工、双向的通信。使用自定义的协议（ws://、wss://），同源策略对 web socket 不适用。<br>web worker：运行在后台的 JavaScript，不影响页面的性能。<br>创建 worker：var worker = new Worker(url);<br>向 worker 发送数据：worker.postMessage(data);<br>接收 worker 返回的数据：worker.onmessage<br>终止一个 worker 的执行：worker.terminate();<br><a href="https://juejin.im/post/5b4af72ae51d45198d4b1388" target="_blank" rel="noopener">资料(掘金)</a></li>
<li>JS 里面什么是闭包<br> 闭包是在一个函数里声明了另外一个函数，并且这个函数访问了父函数作用域里的变量。</li>
<li><p>箭头函数与 this<br>call 和 apply 都是调用函数的方法 call 需要列举每个参数，apply 可以传入参数数组<br>call 在调用的时候可以指定 this<br>window.setTimeout()和 window.setInterval()中 this 的指向是 window 对象</p>
<p>箭头函数的写法</p>
<ol>
<li>规则一：箭头函数只能用赋值式写法，不能用声明式写法</li>
<li>规则二：如果参数只有一个，可以不加括号，如果没有参数或者参数多于一个就需要加括号</li>
<li>规则三：如果函数体只有一句话，可以不加花括号</li>
<li>规则四：如果函数体没有括号，可以不写 return，箭头函数会帮你 return</li>
</ol>
<p>箭头函数的特性</p>
<ol>
<li>箭头函数的特性一：默认绑定外层 this</li>
<li>箭头函数的特性二：不能用 call 方法修改里面的 this</li>
</ol>
<p><a href="https://juejin.im/post/5aa1eb056fb9a028b77a66fd" target="_blank" rel="noopener">参考资料</a></p>
</li>
<li><p>JavaScript 中 apply、call、bind 的区别与用法<br>apply() 方法调用一个函数, 其具有一个指定的 this 值，以及作为一个数组（或类似数组的对象）提供的参数。 语法 func.apply(thisArg, [argsArray])<br>call() 方法调用一个函数, 其具有一个指定的 this 值和分别地提供的参数(参数的列表)。 语法 fun.call(thisArg, arg1, arg2, …)<br>bind()方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。 语法 fun.bind(thisArg, 队列 or 数组)()</p>
</li>
<li>BFC 原理及用法<br>BFC（Block Formatting Context）直译为“块级格式化范围”。<br>是 W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用 当涉及到可视化布局的时候，Block Formatting Context 提供了一个环境，HTML 元素在这个环境中按照一定规则进行布局。一个环境中的元素不会影响到其它环境中的布局<br>怎样才能形成 BFC<ol>
<li>float 的值不能为 none</li>
<li>overflow 的值不能为 visible</li>
<li>display 的值为 table-cell, table-caption, inline-block 中的任何一个</li>
<li>position 的值不为 relative 和 static</li>
</ol>
</li>
</ol>
<h2 id="css-基础"><a href="#css-基础" class="headerlink" title="css 基础"></a>css 基础</h2><ol>
<li>css 哪些属性可以继承<br> 字体系列属性、文本系列属性、元素可见性：visibility、表格布局属性：caption-side、列表属性：list-style-type、设置嵌套引用的引号类型：quotes、光标属性：cursor<br><a href="https://www.jianshu.com/p/34044e3c9317" target="_blank" rel="noopener">参考资料</a></li>
<li>50 道 css 题<br><a href="https://segmentfault.com/a/1190000013325778" target="_blank" rel="noopener">资料</a></li>
<li><p>清除浮动</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father clearfix"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>我是儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background</span>: darkred;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="comment">/* 触发 hasLayout */</span></span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>清除浮动有好几种方法，不过现在最流行的就是 after 伪元素清除浮动(不适用于 IE)。第二种是空标签清除浮动，子元素最后添加一个空标签，然后加上<code>clear:both</code>(w3c 推荐，浮动闭合标签，但是会额外增加无用元素)，第三种是在父元素上面添加<code>overflow:auto;</code>属性(具有不确定性的影响，建议多个浏览器调试)。<br><a href="https://www.jianshu.com/p/23b410708dcd" target="_blank" rel="noopener">简书资料</a><br><a href="https://blog.csdn.net/hshuaile/article/details/69258611" target="_blank" rel="noopener">CSDN 资料</a></p>
</li>
</ol>
<h2 id="浏览器及浏览器兼容性问题"><a href="#浏览器及浏览器兼容性问题" class="headerlink" title="浏览器及浏览器兼容性问题"></a>浏览器及浏览器兼容性问题</h2><ol>
<li><p>浏览器兼容性问题 掘金总结</p>
<ol>
<li>安装 Normalize.css 来磨平各浏览器之间的样式差异问题</li>
<li><p>使用 html5shiv.js 解决 IE9 以下对于新增 H5 标签不支持的问题</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 respond.js 解决 ie9 以下浏览器不支持 CSS3 Media Query 的问题。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"</span> /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器 CSS 兼容前缀</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-o-transform: rotate(<span class="number">7</span>deg); <span class="comment">// Opera</span></span><br><span class="line"></span><br><span class="line">-ms-transform: rotate(<span class="number">7</span>deg); <span class="comment">// IE</span></span><br><span class="line"></span><br><span class="line">-moz-transform: rotate(<span class="number">7</span>deg); <span class="comment">// Firefox</span></span><br><span class="line"></span><br><span class="line">-webkit-transform: rotate(<span class="number">7</span>deg); <span class="comment">// Chrome</span></span><br><span class="line"></span><br><span class="line">transform:rotate(<span class="number">7</span>deg); <span class="comment">// 统一标识语句</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>BFC 解决边距重叠问题<br>当相邻元素都设置了 margin 边距时，margin 将取最大值，舍弃小值。为了不让边距重叠，可以给子元素加一个父元素，并设置该父元素为 BFC：overflow: hidden;</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow: hidden;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://juejin.im/post/59a3f2fe6fb9a0249471cbb4" target="_blank" rel="noopener">掘金总结</a></p>
<ol>
<li>输入一个 URL 回车后发生了什么(经典面试题)</li>
</ol>
<h2 id="Vue-基础"><a href="#Vue-基础" class="headerlink" title="Vue 基础"></a>Vue 基础</h2><ol>
<li>vue 的生命周期(8 个)<br>beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed<br><a href="https://segmentfault.com/a/1190000011381906" target="_blank" rel="noopener">参考资料</a>、</li>
<li>Vue 常问的面试题<br><a href="https://segmentfault.com/a/1190000016344599" target="_blank" rel="noopener">参考资料</a><br><a href="https://blog.csdn.net/RedaTao/article/details/80617514" target="_blank" rel="noopener">参考资料 CSDN</a></li>
<li><p>自定义组件 v-model 的用法<br> emm 之前用过 <code>.sync</code> 不过在自定义组件上用<code>v-model</code>还真没用过。<br> 这个用法在 vue 2.2 版本添加 具体使用方法如下<br> 子组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'msg'</span>,<span class="comment">//这个字段，是指父组件设置 v-model 时，将变量值传给子组件的 msg</span></span><br><span class="line">    event: <span class="string">'ok'</span><span class="comment">//这个字段，是指父组件监听 parent-event 事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span><span class="comment">//此处必须定义和model的prop相同的props，因为v-model会传值给子组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    msg(newVal, oldVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'ok'</span>, <span class="string">'输入字符已经超过3个'</span>) <span class="comment">//通过 emit 触发ok，将字符串传递给父组件的v-model绑定的变量</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>父组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line"> &lt;Vmd v-model=<span class="string">"testMsg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Vmd</span>&gt;</span></span></span><br><span class="line"> &lt;input</span><br><span class="line">   type=<span class="string">"text"</span></span><br><span class="line">   v-model=<span class="string">"testMsg"</span></span><br><span class="line"> &gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> Vmd <span class="keyword">from</span> <span class="string">"@/components/Vmodel.vue"</span>;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   name: <span class="string">"home"</span>,</span><br><span class="line">   components: &#123;</span><br><span class="line">     Vmd</span><br><span class="line">   &#125;,</span><br><span class="line">   data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       testMsg: <span class="string">'a'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有<code>.sync</code>用法，也挺简单，具体见资料<br><a href="https://juejin.im/post/5b5c2d986fb9a04f897840ac" target="_blank" rel="noopener">掘金资料</a></p>
</li>
<li><p>vue-router 的几个钩子函数的使用<br>通过直接更改 Url 触发哪个函数钩子。</p>
</li>
<li>v-for 和 v-if 的优先级及为什么不能在一起使用<br>因为 v-for 优先级比 v-if 高,所以如果一起用的话 每次动一下数据 都会渲染整个列表,设置的 v-if 都走一下 相当于多操作了 DOM,建议你先把数据处理好(内存中 开销比 DOM 小)然后再渲染<br><a href="https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7-%E5%BF%85%E8%A6%81" target="_blank" rel="noopener">Vue 风格指南</a></li>
<li><p>vue 路由 history 模式刷新页面出现 404 问题<br> vue hash 模式下，URL 中存在’#’，用’history’模式就能解决这个问题。但是 history 模式会出现刷新页面后，页面出现 404。解决的办法是用 nginx 配置一下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /&#123;</span><br><span class="line"> root   /data/nginx/html;</span><br><span class="line"> index  index.html index.htm;</span><br><span class="line"> <span class="keyword">if</span> (!-e $request_filename) &#123;</span><br><span class="line">     rewrite ^<span class="regexp">/(.*) /i</span>ndex.html last;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二种方法更改 vue 打包配置文件<br><a href="https://juejin.im/post/5bd7c4196fb9a05cd45730b5" target="_blank" rel="noopener">掘金</a><br><a href="https://segmentfault.com/a/1190000016653688" target="_blank" rel="noopener">思否</a><br><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">文档</a></p>
</li>
<li><p>vuex 相当于数据库和状态管理中心<br>注意问题:模块内的 getter, mutation,action 是注册在全局空间的,state 只注册在局部命名空间的;<br>解决 vuex 数据刷新消失问题<br><a href="https://stackoverflow.com/questions/43027499/vuex-state-on-page-refresh" target="_blank" rel="noopener">stack overflow cookie 存储方式</a><br>记得还有一个</p>
</li>
<li>v-if 触发 destoryed 钩子 v-show 不会触发<br>组件销毁不会清除定时器，setTimeout 放到了异步任务队列，哪怕组件清楚了也会执行回调。</li>
<li>vue 兄弟组件通信的三种方式<br>一、子传父 父传子<br>二、Vuex<br>三、创建一个事件总线 新建一个 vue 实例当做事件总线 然后使用这个实例的$on和$emit 来进行传递信息</li>
<li>组件里面 data 必须是一个函数<br>Object 是引用数据类型, 每个组件的 data 都是内存的同一个地址,一个数据改变了其他也改变了。当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</li>
<li>vue 中\$set 的使用场景<br>一、通过数组的下标去修改数组的值,数据已经被修改了,但是不触发 updated 函数,视图不更新,<br>二、vue 中检测不到对象属性的添加和删除<br>vue 在创建实例的时候把 data 深度遍历所有属性,并使用 Object.defineProperty 把这些属性全部转为 getter/setter。让 Vue 追踪依赖，在属性被访问和修改时通知变化。所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。<br>当你在对象上新加了一个属性 newProperty,当前新加的这个属性并没有加入 vue 检测数据更新的机制(因为是在初始化之后添加的),vue.\$set 是能让 vue 知道你添加了属性, 它会给你做处理</li>
<li>计算属性 vs 方法<br>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。如果不希望有缓存 那么使用方法来代替。</li>
</ol>
<h2 id="React-及-RN-基础"><a href="#React-及-RN-基础" class="headerlink" title="React 及 RN 基础"></a>React 及 RN 基础</h2><ol>
<li>RN 生命周期<br>getDefaultProps、getInitialState、componentWillMount、render、componentDidMount、shouldComponentUpdate、componentWillUpdate、componentDidUpdate、componentWillReceiveProps、componentWillUnmount<br><a href="https://juejin.im/entry/5b1f1b4ae51d4506cd4feb0a" target="_blank" rel="noopener">参考资料</a></li>
<li>React 有关的面试题<br><a href="https://juejin.im/post/5b2215f76fb9a00e8f795cd1" target="_blank" rel="noopener">掘金资料</a></li>
<li>setState 之后发生了什么</li>
</ol>
<h2 id="Http-协议"><a href="#Http-协议" class="headerlink" title="Http 协议"></a>Http 协议</h2><p><a href="https://www.cnblogs.com/whgk/p/6130882.html" target="_blank" rel="noopener">资料</a></p>
<ol>
<li>Http 的请求报文和响应报文分为几个部分<br>一个 HTTP 请求报文由请求行（request line）、请求头部（header）、空行和请求数据 4 个部分组成<br>HTTP 响应也由三个部分组成，分别是：状态行、消息报头、响应正文。</li>
<li>常见的 HTTP 状态码<br>1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码。代码 说明<br>2xx (成功)表示成功处理了请求的状态代码。代码 说明<br>3xx (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。代码 说明<br>4xx(客户端请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。代码 说明<br>5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。代码 说明<br><a href="https://www.cnblogs.com/starof/p/5035119.html" target="_blank" rel="noopener">博客园简洁</a><br><a href="https://blog.csdn.net/q1056843325/article/details/53147180" target="_blank" rel="noopener">常见的 14 种状态码</a></li>
<li>Get 和 Post 的区别<br>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。<br>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。<br>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。<br>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。<br>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。<br>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。<br>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。<br>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。<br>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>RESTful Api 四种操作对应说明<br>POST Create 新增一个没有 id 的资源<br>GET Read 取得一个资源<br>PUT Update 更新一个资源。或新增一个含 id 资源(如果 id 不存在)<br>DELETE Delete 删除一个资源</li>
</ol>
<h2 id="Webpack-面试题基础"><a href="#Webpack-面试题基础" class="headerlink" title="Webpack 面试题基础"></a>Webpack 面试题基础</h2><p><a href="https://zhuanlan.zhihu.com/p/44438844" target="_blank" rel="noopener">资料</a></p>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p><a href="https://www.cnblogs.com/lanyueff/p/6400785.html" target="_blank" rel="noopener">博客园资料</a><br><a href="https://www.cnblogs.com/vipstone/p/7921549.html" target="_blank" rel="noopener">博客园资料 2</a><br><a href="https://blog.csdn.net/quhongqiang/article/details/80388401" target="_blank" rel="noopener">50 道 JS 面试题 CSDN</a><br><a href="https://www.jb51.net/article/109269.htm" target="_blank" rel="noopener">几道笔试算法题</a><br><a href="https://www.jb51.net/article/124024.htm" target="_blank" rel="noopener">this apply call</a></p>
<h2 id="框架带来的问题-Vue-React"><a href="#框架带来的问题-Vue-React" class="headerlink" title="框架带来的问题(Vue+React)"></a>框架带来的问题(Vue+React)</h2><ol>
<li>为什么 v-for 渲染的时候需要带 key 值，并且不推荐使用 index<br>首先 Vue 在 2.0 也加入了 diff 算法，列表循环带 key 值是为了更高效的渲染列表。其原理是 diff 算法会比较虚拟 Dom 的差异，然后能复用的地方会根据 key 值复用，然后将差异的部分渲染到 DOM 树里面。如果是在列表后面 push 一个数据，那么 index 值是顺序加一的，并且不影响原来列表的顺序，在此数据之前的列表数据都会得到复用，而 Dom 只渲染此条数据。但是假如有一条数据在列表中间插入，那么以 index 为 key 的值则和原来的列表数据不对应，会导致此条数据及之后的数据全部重新渲染而不会得到复用。因此建议尽量不要使用 index 值作为列表的 key 值。<br><a href="https://wangyaxing.cn/2018/04/23/2018-04-20-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVirtual-DOM/#more" target="_blank" rel="noopener">简单实现一个 Virtual DOM</a><br><a href="https://wangyaxing.cn/2018/03/18/2018-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8v-for%E6%97%B6%E5%BF%85%E9%A1%BB%E6%B7%BB%E5%8A%A0%E5%94%AF%E4%B8%80%E7%9A%84key/#more" target="_blank" rel="noopener">为什么使用 v-for 时必须添加唯一的 key?</a></li>
</ol>
<h2 id="JS-面试题"><a href="#JS-面试题" class="headerlink" title="JS 面试题"></a>JS 面试题</h2><ol>
<li><p>给定一个字符串 var str=’abcabcefbbd’。1)求字符 a 出现的次数。2)求出现次数最多的字符是，出现的次数是多少</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">"abcabcefbbd"</span>;</span><br><span class="line">  <span class="keyword">let</span> beatStr = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> moreStr = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (beatStr[item]) &#123;</span><br><span class="line">      beatStr[item]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      beatStr[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beatStr[item] &gt; num) &#123;</span><br><span class="line">      num = beatStr[item];</span><br><span class="line">      moreStr = item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(num, moreStr, beatStr);</span><br><span class="line">  <span class="keyword">return</span> beatStr;</span><br><span class="line">&#125;</span><br><span class="line">getStr();</span><br></pre></td></tr></table></figure>
<p>输出<code>4 &#39;b&#39; {a: 2, b: 4, c: 2, e: 1, f: 1}</code></p>
</li>
<li><p>以下代码输出多少</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.c);</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    c += <span class="number">1</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">plus();</span><br><span class="line">print();</span><br></pre></td></tr></table></figure>
<p>输出:<code>window.c = 0</code> <code>c = 0</code></p>
</li>
<li><p>js 实现一个千分位分割方法<br>js 实现一个千位符分割方法: <code>parseInt(&#39;11123123231&#39;).toLocaleString()</code> <code>&quot;111,231,232,313,213&quot;</code><br> 或者是</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"100000000000"</span>,</span><br><span class="line">  reg = <span class="regexp">/(?=(\B\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="string">","</span>));</span><br></pre></td></tr></table></figure>
<p><a href="https://juejin.im/post/5abb5b01f265da237f1e5a92" target="_blank" rel="noopener">参考资料</a></p>
</li>
<li><p>实现一个拍平数组，实现以下需求<br><code>var source = [&#39;1&#39;,[&#39;2&#39;,[&#39;3&#39;,[&#39;4&#39;]]],&#39;5&#39;,[&#39;6&#39;]]</code><br><code>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;]</code><br>解题思路：递归<br><code>var ary = [1,23,4];console.log(ary instanceof Array)//true;</code> instanceof 判断是否是数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="string">"1"</span>, [<span class="string">"2"</span>, [<span class="string">"3"</span>, [<span class="string">"4"</span>]]], <span class="string">"5"</span>, [<span class="string">"6"</span>]];</span><br><span class="line"><span class="keyword">var</span> sortArr = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      sort(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sortArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(source);</span><br><span class="line"><span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line"><span class="built_in">console</span>.log(sortArr);</span><br><span class="line"><span class="comment">// [ '1', '2', '3', '4', '5', '6' ]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>函数柯里化 任意参数数相加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> adder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _args = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _args.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    [].push.apply(_args, [].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="comment">// _args.push(...arguments)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> sum = adder();</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// Function</span></span><br><span class="line"></span><br><span class="line">sum(<span class="number">100</span>, <span class="number">200</span>)(<span class="number">300</span>); <span class="comment">// 调用形式灵活，一次调用可输入一个或者多个参数，并且支持链式调用</span></span><br><span class="line">sum(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum()); <span class="comment">// 1000 （加总计算）</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.haorooms.com/post/js_currying" target="_blank" rel="noopener">参考资料:dalao</a><br><a href="https://juejin.im/post/5af13664f265da0ba266efcf" target="_blank" rel="noopener">参考资料:掘金</a><br><a href="https://juejin.im/entry/58184ccda22b9d00679976c0" target="_blank" rel="noopener">参考资料:arguments.callee</a></p>
</li>
<li><p>数组[1,2,3,4,5]如何变成[1,2,3,’a’,’b’,5]<br>使用 ES6 的扩展运算符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">'a'</span>.<span class="string">'b'</span>]</span><br><span class="line">a.splice(<span class="number">3</span>,<span class="number">1</span>,...b)</span><br></pre></td></tr></table></figure>
</li>
<li><p>以下代码输出多少</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  length: <span class="number">5</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.method(fn, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>输出：10，2</p>
<blockquote>
<p>method 这个函数传入了两个参数,一个参数为 fn(),fn()为普通函数,this 指向函数的调用者,此时指向全局(也可以看这个函数前面没有点),所以运行结果为 10,arguments 是函数的所有参数,是一个类数组的对象,arguments0,可以看成是 arguments.0(),调用这个函数的是 arguments,此时 this 就是指 arguments,this.length 就是 angument.length,就是传入的参数的总个数 2</p>
</blockquote>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb和mongoose学习及使用]]></title>
      <url>/2019/03/17/mongodb%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/2f54b90efe15" target="_blank" rel="noopener">mongoose 增删改查</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Puppeteer简单使用]]></title>
      <url>/2019/03/14/Puppeteer%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>npm i puppeteer</code> or <code>yarn add puppeteer</code><br>默认下载最新版本的 Chromium。<br><code>npm i puppeteer-core</code> or <code>yarn add puppeteer-core</code> 这个包不含 Chromium。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>启动<br><code>const browser = await puppeteer.launch();</code><br>导航到某个页面<br><code>const page = await browser.newPage();</code><br><code>await page.goto(&quot;https://bj.meituan.com&quot;);</code><br>等待加载完毕<br><code>await page.waitForSelector(&#39;#loginForm&#39;);</code>等待某个节点出现<br><code>await page.waitFor(3500);</code>等待某个时间</p>
<a id="more"></a>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.liuyiqi.cn/2017/12/05/common-puppeteer-api-collection/" target="_blank" rel="noopener">一些页面操作技巧</a><br><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/" target="_blank" rel="noopener">Api 中文文档</a><br><a href="https://puppeteer-china.github.io/" target="_blank" rel="noopener">中文社区</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RN开发GitHub]]></title>
      <url>/2019/01/26/RN%E5%BC%80%E5%8F%91GitHub/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol>
<li>由于组件内返回 html 结构需要一个根节点，所以很多人选择嵌套一层 view，但是这回影响性能。我们可以定义一个数组，将标签 push 到数组里面然后再返回这个数组，这样组件内就能返回同级的两个标签而不用再嵌套一层 view。</li>
</ol>
<h2 id="Redux-react-navigation-搭建架子"><a href="#Redux-react-navigation-搭建架子" class="headerlink" title="Redux+react-navigation 搭建架子"></a>Redux+react-navigation 搭建架子</h2><p>首先安装一堆第三方库。<br><code>yarn add react-nativgation react-navigation-redux-helpers redux react-redux redux-devtools redux-thunk</code></p>
<ol>
<li><p>在根路由<code>AppNavigator.js</code>li’mina 初始化 <code>react-navigation</code>与<code>redux</code>的中间件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReactNavigationReduxMiddleware &#125; <span class="keyword">from</span> <span class="string">"react-navigation-redux-helpers"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> middleware = createReactNavigationReduxMiddleware(</span><br><span class="line">  <span class="string">"root"</span>,</span><br><span class="line">  state =&gt; state.nav</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将根导航器组件传递给 reduxifyNavigator 函数,必须在第一步之后执行，返回一个将 navigation state 和 dispath 作为 props 的新组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createReduxContainer &#125; <span class="keyword">from</span> <span class="string">"react-navigation-redux-helpers"</span></span><br><span class="line"><span class="keyword">const</span> AppNavigationState = reduxifyNavigator(RootNavigator, <span class="string">"root"</span>)</span><br><span class="line"><span class="comment">// reduxifyNavigator被弃用</span></span><br><span class="line"><span class="comment">// 改用createReduxContainer</span></span><br><span class="line"><span class="comment">// 必须要写在 createReactNavigationReduxMiddleware 调用之后</span></span><br><span class="line"><span class="keyword">const</span> AppNavigationState = createReduxContainer(RootNavigator, <span class="string">"root"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 state 到 props 的映射关系并导出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">  state: state.nav</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(AppNavigationState)</span><br></pre></td></tr></table></figure>
</li>
<li><p>js 目录下面创建 reducer、action、store 目录</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action.js</span></span><br><span class="line"><span class="keyword">import</span> Types <span class="keyword">from</span> <span class="string">"../types"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onThemeChange</span>(<span class="params">theme</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: Types.THEME_CHANGE,</span><br><span class="line">    theme</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onThemeChange</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">"./theme"</span></span><br><span class="line"><span class="keyword">import</span> &#123; rootCom, RootNavigator &#125; <span class="keyword">from</span> <span class="string">"../navigator/AppNavigator"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.指定默认state</span></span><br><span class="line"><span class="keyword">const</span> navState = RootNavigator.router.getStateForAction(</span><br><span class="line">  RootNavigator.router.getActionForPathAndParams(rootCom)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建自己的 navigation reducer</span></span><br><span class="line"><span class="keyword">const</span> navReducer = <span class="function">(<span class="params">state = navState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextState = RootNavigator.router.getStateForAction(action, state)</span><br><span class="line">  <span class="keyword">return</span> nextState || state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 合并reducer</span></span><br><span class="line"><span class="keyword">const</span> index = combineReducers(&#123;</span><br><span class="line">  nav: navReducer,</span><br><span class="line">  theme: theme</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> index</span><br></pre></td></tr></table></figure>
<p>上面这个 rootCom 是 AppNavigator.js 根路由里面定义的变量,<code>export const rootCom = &quot;Init&quot;</code> 变量代表的是初始的路由名。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer theme.js</span></span><br><span class="line"><span class="keyword">import</span> Types <span class="keyword">from</span> <span class="string">"../../action/types"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  theme: <span class="string">"blue"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">onAction</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> Types.THEME_CHANGE:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        theme: action.theme</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"../reducer"</span></span><br><span class="line"><span class="keyword">import</span> &#123; middleware &#125; <span class="keyword">from</span> <span class="string">"../navigator/AppNavigator"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewares = [middleware]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducers, applyMiddleware(...middlewares))</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一堆设置完事了 然后在app.js里面使用 最后由index.js注册根组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"><span class="keyword">import</span> AppNavigator <span class="keyword">from</span> <span class="string">"./navigator/AppNavigator"</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;AppNavigator /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 redux-devtools 插件 然后 <code>yarn add redux-devtools-extension</code>,然后修改下 store.js 文件，这样就能在浏览器利用插件查看 redux 状态。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore, compose &#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"../reducer"</span></span><br><span class="line"><span class="keyword">import</span> &#123; middleware &#125; <span class="keyword">from</span> <span class="string">"../navigator/AppNavigator"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewares = [middleware]</span><br><span class="line"><span class="keyword">let</span> store</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  !(</span><br><span class="line">    <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ ||</span><br><span class="line">    <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">  )</span><br><span class="line">) &#123;</span><br><span class="line">  store = createStore(reducers, applyMiddleware(...middlewares))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  store = createStore(</span><br><span class="line">    reducers,</span><br><span class="line">    compose(</span><br><span class="line">      applyMiddleware(...middlewares),</span><br><span class="line">      <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp;</span><br><span class="line">        <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
</li>
<li><p>HomePage.js 处理安卓物理返回键</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: XavierShi</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-11 17:14:20</span></span><br><span class="line"><span class="comment"> * @Last Modified by: XavierShi</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2019-02-13 16:49:19</span></span><br><span class="line"><span class="comment"> * @Description 底部主路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> NavigationUtil <span class="keyword">from</span> <span class="string">"../navigator/NavigationUtil"</span></span><br><span class="line"><span class="keyword">import</span> DynamicTabNavigator <span class="keyword">from</span> <span class="string">"../navigator/DynamicTabNavigator"</span></span><br><span class="line"><span class="keyword">import</span> &#123; BackHandler &#125; <span class="keyword">from</span> <span class="string">"react-native"</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">"react-navigation"</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span></span><br><span class="line"></span><br><span class="line">type Props = &#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">Props</span>&gt; </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    BackHandler.addEventListener(<span class="string">"hardwareBackPress"</span>, <span class="keyword">this</span>.onBackPress)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    BackHandler.removeEventListener(<span class="string">"hardwareBackPress"</span>, <span class="keyword">this</span>.onBackPress)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onBackPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dispatch, nav &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (nav.index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(NavigationActions.back())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    NavigationUtil.navigation = <span class="keyword">this</span>.props.navigation</span><br><span class="line">    <span class="keyword">return</span> &lt;DynamicTabNavigator /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; (&#123;</span><br><span class="line">  nav: state.nav</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps)(HomePage)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的使用]]></title>
      <url>/2019/01/10/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Git-的使用"><a href="#Git-的使用" class="headerlink" title="Git 的使用"></a>Git 的使用</h2><a id="more"></a>
<h3 id="问题及解决办法"><a href="#问题及解决办法" class="headerlink" title="问题及解决办法"></a>问题及解决办法</h3><ol>
<li>更新一个带密码的项目时候输错了密码，结果被机子给记住历史没法再次拉取项目的解决办法：<br><code>sudo git config --system --unset credential.helper</code>，或者去钥匙串找到刚才输入的密码删除掉。</li>
<li>提交时的用户名和账号名不一致问题：<br><code>git config --global user.name &quot;***&quot;</code> 修改全局的名字，<code>git config --global user.email ***</code>修改全局的邮箱。<br>在对应项目目录下面去掉<code>--global</code>就是修改的当前项目，只要把名字和邮箱对应成你账号的信息，提交的时候就会显示你的头像信息了。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue+ssr开发美团网PC版]]></title>
      <url>/2018/12/26/vue+ssr%E5%BC%80%E5%8F%91%E7%BE%8E%E5%9B%A2%E7%BD%91PC%E7%89%88/</url>
      <content type="html"><![CDATA[<h2 id="使用-nuxt-编写美团-PC-端-vue-ssr-egg"><a href="#使用-nuxt-编写美团-PC-端-vue-ssr-egg" class="headerlink" title="使用 nuxt 编写美团 PC 端(vue+ssr+egg)"></a>使用 nuxt 编写美团 PC 端(vue+ssr+egg)</h2><a id="more"></a>
<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="nuxt-安装"><a href="#nuxt-安装" class="headerlink" title="nuxt 安装"></a>nuxt 安装</h3><p><code>npx create-nuxt-app &lt;projectName&gt;</code> or <code>yarn create nuxt-app &lt;projectName&gt;</code></p>
<h3 id="nuxt-启动"><a href="#nuxt-启动" class="headerlink" title="nuxt 启动"></a>nuxt 启动</h3><p>为了使 node 文件支持 es6 语法和 async，await，需要使用 babel 配置一下。<br><code>npm i babel-cli -g</code>，然后在 package.json 里面的 dev 和 start 命令的最后面加上<code>--exec babel-node</code>,根目录新建一个<code>.babelrc</code>文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-0"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"transform-runtime"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为安装的 eslint-plugin-vue 这个 eslint 校验规则是能自闭和的元素就自闭和，我个人不习惯，所以要重新设置一下<code>.eslintrc.js</code>,rules 里面添加上这段代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'vue/html-self-closing'</span>: [<span class="string">"error"</span>, &#123;</span><br><span class="line">  <span class="string">"html"</span>: &#123;</span><br><span class="line">    <span class="string">"void"</span>: <span class="string">"never"</span>,</span><br><span class="line">    <span class="string">"normal"</span>: <span class="string">"any"</span>,</span><br><span class="line">    <span class="string">"component"</span>: <span class="string">"any"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"svg"</span>: <span class="string">"always"</span>,</span><br><span class="line">  <span class="string">"math"</span>: <span class="string">"always"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>安装<code>npm i babel-preset-es2015 babel-plugin-transform-runtime babel-runtime -D</code>，然后就可以执行<code>npm run dev</code>了。</p>
<h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><p>运行<code>brew install redis</code>安装。<br>Linux：cd 到 redis 的 src 目录 <code>./redis-server &amp;</code>(添加&amp;后台启动) or <code>./redis-server &amp; ../redis.conf</code>(配置文件启动)<br>运行<code>brew services start redis</code>后台运行 redis 服务，运行<code>brew services sop redis</code>停止后台服务。<br><code>redis-server</code>服务端运行命令,<code>redis-cli</code>运行客户端。<code>quit</code>退出服务端。</p>
<h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p><code>npm install -g nrm</code> 一个能切换仓库源的工具。<br><code>nrm ls</code>列出仓库源。<br><code>nrm use ***</code>使用源。</p>
<h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><p>在数据文件目录使用命令导入数据表 <code>mongoimport -d meituan -c areas areas.dat</code> meituan 是数据库名字 areas 是集合(表名) areas.dat 是数据文件。<br><a href="https://segmentfault.com/a/1190000006236494" target="_blank" rel="noopener">导出导入操作集合</a></p>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p><code>curl -d &quot;name=lily&quot; http://*****</code>一个 linux 命令，发送 post 请求。<br>如果发送 get 请求则不用加-d。</p>
<h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><h3 id="让-node-支持-es6-导入语法"><a href="#让-node-支持-es6-导入语法" class="headerlink" title="让 node 支持 es6 导入语法"></a>让 node 支持 es6 导入语法</h3><ol>
<li><code>npm i babel-cli babel-preset-es2015 --save</code></li>
<li><p>根目录新建一个文件.babelrc 内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>package.json 的 script 启动项里面命令行最后面添加<code>--exec babel-node</code></p>
</li>
</ol>
<h3 id="组件引入-css"><a href="#组件引入-css" class="headerlink" title="组件引入 css"></a>组件引入 css</h3><p>如果使用 sass、less、stylus 一般平时可以使用<code>@/alias</code>的方式引入样式表，但是新版 nuxt 已经不支持如此引入方式。</p>
<blockquote>
<p>请注意: 从 Nuxt 2.0 开始，〜/alias 将无法在 CSS 文件中正确解析。你必须在 url CSS 引用中使用~assets（没有斜杠）或@别名，即 background:url(“~assets/banner.svg”)</p>
</blockquote>
<p>不过实际测试@不好使..<br>或者使用<code>styleResources</code>来处理样式的变量和<code>mixin</code>。<br><code>yarn add @nuxtjs/style-resources</code> &amp;&amp; <code>yarn add stylus-loader stylus</code>,<code>nuxt.config.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  modules: [<span class="string">"@nuxtjs/style-resources"</span>],</span><br><span class="line">  styleResources: &#123;</span><br><span class="line">    scss: <span class="string">"./assets/variables.scss"</span>,</span><br><span class="line">    less: <span class="string">"./assets/**/*.less"</span></span><br><span class="line">    <span class="comment">// sass: ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样就能随处使用定义过的变量或者函数…</p>
<h3 id="axios-封装及报错"><a href="#axios-封装及报错" class="headerlink" title="axios 封装及报错"></a>axios 封装及报错</h3><p>axios 报错<code>Cannot read property &#39;cancelToken&#39; of undefined</code>，原因是因为 request 拦截没有 <code>return config</code>。<br>优雅的切换 baseUrl,由于这个项目的登录接口在本地做了一次转发，因此在登录的时候请求的是本地的接口，其他时候都是请求的 egg 接口，因此我们要根据情况适当的切换 baseUrl，但是由于前端项目对 axios 进行了一遍封装，因此简单的引入 axios 设置 baseUrl 是无效的，我们需要引入 request.js 里面的 request 对象，然后<code>request.defaults.baseURL = url.Api</code>设置 baseUrl，同理 token 也可以如此设置:<code>request.defaults.headers.Authorization = &#39;Bearer &#39; + res.token</code></p>
<h3 id="第三方模块全局引入"><a href="#第三方模块全局引入" class="headerlink" title="第三方模块全局引入"></a>第三方模块全局引入</h3><p>没有找到设置全局模块的 webpack 配置，不过 nuxt 的 plugin 使用说明里面提供了几种全局使用第三方模块的方式。例如将第三方模块注入 Vue 或者 ctx 实例，这样就能在客户端或者服务端使用该模块。<br>例子:<br><code>npm install good-storage --save</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugin/storage.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> storage <span class="keyword">from</span> <span class="string">"good-storage"</span>;</span><br><span class="line">Vue.prototype.$storage = storage;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'@/plugins/element-ui'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      src: <span class="string">'@/plugins/storage'</span>,</span><br><span class="line">      ssr: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>
<p>使用：<code>this.$storage.set(key,value)</code></p>
<h3 id="页面字体图标引入"><a href="#页面字体图标引入" class="headerlink" title="页面字体图标引入"></a>页面字体图标引入</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"header"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"https://s0.meituan.net/bs/fe-web-meituan/076a786/font/header.woff?t=1501036445556"</span>)</span><br><span class="line">    <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"home-category-iconfont"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"https://s0.meituan.net/bs/fe-web-meituan/076a786/font/home-category-iconfont.woff?t=1503027869484"</span>)</span><br><span class="line">    <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"MFShangHei-Regular"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"https://s0.meituan.net/bs/fe-web-meituan/076a786/font/MFShangHei-Regular.woff?t=1503027869484"</span>)</span><br><span class="line">    <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"numbers"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"https://s0.meituan.net/bs/fe-web-meituan/076a786/font/numbers.woff?t=1503027869484"</span>)</span><br><span class="line">    <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先引入对应的组件图标并重命名，然后</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home-category-iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: home-category-iconfont <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hc-icon-food</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"\e622"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单独写一个字体图标对应的 css 文件，并且在需要用到字体图标的组件引入，每个图标有单独对应的 css 语句，需要去审查美团网并复制。</p>
<h2 id="页面组件开发"><a href="#页面组件开发" class="headerlink" title="页面组件开发"></a>页面组件开发</h2><p>使用<code>template</code>包裹代码块做<code>v-for</code>循环，不会产生多余的 dom 结构。<br>使用<code>crypto-js</code>模块进行密码加密。</p>
<ol>
<li><code>npm i -save crypto-js</code></li>
<li><code>let CryptoJS = require(&#39;crypto-js&#39;)</code></li>
<li><code>CryptoJS.MD5(***).toString()</code></li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Nuxt 不支持组件获取异步数据，所以要么在 mounted 里面写(不支持 ssr)，要么在 store 的 index 的 nuxtServerInit 方法里面写，但是这样会延迟首屏渲染时间(猜的,这个方法阻塞)，要么在页面里面获取数据然后使用 prop 或者存到 vuex 里面,但是 Nuxt 只有页面是支持预渲染请求数据的，组件并不支持，因此若想获取并保存和渲染数据，需要在最一开始使用到次组件的页面获取该组件的数据。这里我选择存 vuex 里面。</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>vuex 使用模块功能时注意是否设置命名空间，注意 state 里面多了一层嵌套数据。</p>
<h3 id="Nuxt-使用-vue-awesome-swiper-做轮播等设置"><a href="#Nuxt-使用-vue-awesome-swiper-做轮播等设置" class="headerlink" title="Nuxt 使用 vue-awesome-swiper 做轮播等设置"></a>Nuxt 使用 vue-awesome-swiper 做轮播等设置</h3><p>照一般的组件设置后，使用方式如下<br><a href="https://github.com/surmon-china/vue-awesome-swiper/blob/master/examples/nuxt-ssr-example/nuxt-ssr-example.vue?1548230334530" target="_blank" rel="noopener">使用方式</a><br>div 标签上面加<code>v-swiper</code>指令设置</p>
<h2 id="后台业务开发"><a href="#后台业务开发" class="headerlink" title="后台业务开发"></a>后台业务开发</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>用户表的几个字段，例如手机号、邮箱、昵称等字段，除了手机号是唯一但不必需的，手机号必需，因为这几个字段要用来进行登录等操作。同时因为注册的时候只使用手机号进行注册，为了避免因为邮箱、昵称等字段重复引起的注册失败，所以美团自己给用户的昵称设置了一个乱码，邮箱置为空，待以后填写。</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>mongoose 进行一个值多个字段的查询，用途是根据用户输入的一个值来进行手机号、邮箱、昵称的查询：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> ctx.model.User.find(&#123;</span><br><span class="line">  $or: [</span><br><span class="line">    &#123; <span class="attr">phoneNum</span>: <span class="built_in">parseInt</span>(ctx.request.body.username) &#125;,</span><br><span class="line">    &#123; <span class="attr">userName</span>: ctx.request.body.username &#125;,</span><br><span class="line">    &#123; <span class="attr">email</span>: ctx.request.body.username &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>大部分页面和接口并不是一定要登录才能看到的，因此状态校验需要单独写在那些页面里面，包括后台路由校验 token 也是同理。</p>
<h2 id="Nuxt-和-eggjs-的部署"><a href="#Nuxt-和-eggjs-的部署" class="headerlink" title="Nuxt 和 eggjs 的部署"></a>Nuxt 和 eggjs 的部署</h2><h3 id="部署-eggjs"><a href="#部署-eggjs" class="headerlink" title="部署 eggjs"></a>部署 eggjs</h3><ol>
<li>首先编译</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>emmm,这个项目新建的时候不该用 axios module，它将 axios 又处理了一下，跟平常的使用习惯有较大差别。<br>用 MongoDB 有点不大好，MongoDB 本身文档资料较少，初步上手问题较多。<br>Jokcy 老师说前后端分离开发约定的数据基本就是扯淡，后端会改，弄得前端很麻烦，建议前端定义自己的数据格式然后请求接口的时候做一层映射。</p>
<h2 id="☆☆☆☆☆-这个项目思想出了问题"><a href="#☆☆☆☆☆-这个项目思想出了问题" class="headerlink" title="☆☆☆☆☆ 这个项目思想出了问题"></a>☆☆☆☆☆ 这个项目思想出了问题</h2><p>nuxt 我选择 vue+koa 混合的方式创建项目，我的后端使用 eggjs 进行编写，然而我忽略了一个问题，那就是：这个项目本身是基于 koa(后端项目)做的前端 Vue 项目(前端占比大),前后端共用一个端口(cookie 不能跨域)，共用一套路由，一些身份校验、token 保存要使用 cookie 来做，但是 cookie 一般不能跨域，即 3000 的 nuxt 端口无法直接向 7001 的 eggjs 服务端口发送 cookie，这样用户的登录态的保存就是个问题。<br>不过幸运的是可以换其他的方式进行解决。</p>
<h3 id="Nuxt-前后端分离开发-前端刷新判断用户状态-nuxt-做接口转发"><a href="#Nuxt-前后端分离开发-前端刷新判断用户状态-nuxt-做接口转发" class="headerlink" title="Nuxt 前后端分离开发 前端刷新判断用户状态 nuxt 做接口转发"></a>Nuxt 前后端分离开发 前端刷新判断用户状态 nuxt 做接口转发</h3><p>由于采用前后端分离式开发，nuxt 项目刷新的时候会将 vuex 数据刷新掉，页面渲染之前又无法取得 localStorage 保存的本地值，如果采用等页面渲染完成时候，再获取本地值请求接口获得用户数据的方式不安全也不优雅。经过网上查找之后我选择如下文章采用的方式，使用创建的 nuxt 项目自带的 koa 进行一下请求转发，然后由 koa 设置 cookie，用 nuxtServerInit 函数进行状态判断。</p>
<p><a href="https://juejin.im/post/5a24df9ef265da43133cfb2e" target="_blank" rel="noopener">参考资料：Nuxt.js 服务端渲染实践，从开发到部署</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[造一个简单的UI轮子(Vue)]]></title>
      <url>/2018/12/25/%E9%80%A0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84UI%E8%BD%AE%E5%AD%90/</url>
      <content type="html"><![CDATA[<h2 id="造一个简单的-Vue-UI-库-移动端"><a href="#造一个简单的-Vue-UI-库-移动端" class="headerlink" title="造一个简单的 Vue UI 库(移动端)"></a>造一个简单的 Vue UI 库(移动端)</h2><p>其实是出于对第一个使用的 vue 框架 mint-ui 的怀念，以及想要打造一个简单的适合自己的移动端 UI 框架的目的做的项目。整体想法和架构基于 mint-ui 但是会参考很多 UI 库例如 vux、vant 等，因为 mint-ui 客观事实上来说还是有很多地方需要修改和优化的。</p>
<a id="more"></a>
<h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><p>进行中…</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://xiedaimala.com/courses/6d63da67-6eea-4711-aeb4-0c3a949341dc#/common" target="_blank" rel="noopener">Vue 实现前端 UI 框架（造轮子）连载中</a><br><a href="https://cli.vuejs.org/zh/guide/webpack.html#%E7%AE%80%E5%8D%95%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">Vue-cli3 webpack 相关</a><br><a href="https://github.com/XavierShi/sweet-ui" target="_blank" rel="noopener">sweet</a><br><a href="https://github.com/youzan/vant?1545704504879" target="_blank" rel="noopener">Vant</a><br><a href="https://github.com/didi/mand-mobile" target="_blank" rel="noopener">didi mant</a><br><a href="https://juejin.im/post/5b7f81ece51d4538c210a0fc" target="_blank" rel="noopener">我写了一个面向源码阅读者的 UI 框架（基于 Vue）</a><br><a href="https://blog.csdn.net/GitChat/article/details/79324147" target="_blank" rel="noopener">如何基于 Vue 2 写一套 UI 库？</a><br><a href="https://blog.csdn.net/u014682977/article/details/77923175" target="_blank" rel="noopener">如何实现一个简单的 Vue 移动端组件库</a><br><a href="https://zhuanlan.zhihu.com/p/30948290" target="_blank" rel="noopener">从零开始搭建 Vue 组件库 VV-UI</a><br><a href="https://www.w3cplus.com/css/css-architecture-1.html" target="_blank" rel="noopener">编写模块化 CSS：BEM</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm发包技巧]]></title>
      <url>/2018/12/20/npm%E5%8F%91%E5%8C%85%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="一点-npm-发包技巧"><a href="#一点-npm-发包技巧" class="headerlink" title="一点 npm 发包技巧"></a>一点 npm 发包技巧</h2><h3 id="使用-nrm-管理源"><a href="#使用-nrm-管理源" class="headerlink" title="使用 nrm 管理源"></a>使用 nrm 管理源</h3><p>今天发布 npm 包的时候一直提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! 403 Forbidden - PUT https://registry.npm.taobao.org/@xaviershi%2fvue-cli-plugin-xaviershi - [no_perms] Private mode enable, only admin can publish this module</span><br></pre></td></tr></table></figure>
<p>经过查找是因为使用 taobao 源的原因导致的。<br>首先<code>npm i nrm</code>,<code>nrm ls</code>查看源,<code>nrm use</code>使用源</p>
<h3 id="发布带作用域的包"><a href="#发布带作用域的包" class="headerlink" title="发布带作用域的包"></a>发布带作用域的包</h3><ol>
<li><code>npm init --scope=&lt;作用域名&gt;</code></li>
<li><code>npm publish --access public</code></li>
<li>好像只能写自己账号名字的作用域，不过可以交钱创建组织<a id="more"></a>
</li>
</ol>
<h3 id="npm-撤销发布的包"><a href="#npm-撤销发布的包" class="headerlink" title="npm 撤销发布的包"></a>npm 撤销发布的包</h3><p><code>npm unpublish 作用域名@包名@版本号</code>,只能撤销 24 小时内发布的包。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.cnblogs.com/penghuwan/p/6973702.html" target="_blank" rel="noopener">【npm】利用 npm 安装/删除/发布/更新/撤销发布包</a><br><a href="https://juejin.im/post/5ab3f77df265da2392364341" target="_blank" rel="noopener">2018 年了，你还是只会 npm install 吗？</a><br><a href="https://blog.csdn.net/u013727805/article/details/80849329" target="_blank" rel="noopener">npm 发布以@开头命名的 public 公有包！！！</a><br><a href="http://huang-x-h.github.io/2016/06/09/using-npm-scoped-package/" target="_blank" rel="noopener">使用 npm 作用域管理发布包</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RN基本开发环境搭建]]></title>
      <url>/2018/12/06/RN%E5%9F%BA%E6%9C%AC%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="基础搭建"><a href="#基础搭建" class="headerlink" title="基础搭建"></a>基础搭建</h2><p><code>react-native init AwesomeProject</code> 默认会下载最新的 RN 版本，启动 <code>react-native run-ios</code> or <code>react-native run-android</code>。<br>iOS 真机启动步骤:</p>
<ol>
<li><code>Bundle Identifier</code>改证书名，<code>Version</code>改版本号</li>
<li>选择 team 选择部署设备系统版本</li>
<li>target 换到 Tests，取消勾选<code>Allow testing Host Application APIs</code></li>
<li>选择 team，切换到 Build Settings 版本号切换为设备版本</li>
<li>Info.plist <code>App Transport Security Settings -&gt; Allow Arbitrary Loads</code>勾选为 yes</li>
<li><code>RCTWebSocket.xcodeproj-&gt;RCTWebSocketExecutor.m</code> localhost 替换为本机 IP</li>
<li>Target 选择 Tests Build Phases-&gt; Link Binry with Libraries -&gt; + -&gt; libRCTWebSocket.a-&gt;add</li>
<li>cmd+r 真机运行，然后 iPhone 信任证书再运行一遍<br><a href="https://segmentfault.com/a/1190000014416132" target="_blank" rel="noopener">具体步骤及资料</a></li>
<li>Android 环境下载 gradle 缓慢的问题。黏贴命令行里面的地址使用迅雷下载，然后将包拖到 chome 里面会得到一个 file 地址，这个地址替换项目中 android/gradle/wrapper/gradle-wrapper.properties 里面的 distributionUrl 注意加转义字符</li>
<li>iOS 真机调试以上技巧 0.57.7 版本好使 0.58 不行 报不支持 arm64 的错。真机调试安装到 iPhone 之后 不用改 <code>RCTWebSocketExecutor.m</code>文件的 ip 地址依然能刷新修改后的代码。</li>
</ol>
<h2 id="RN-开发技巧"><a href="#RN-开发技巧" class="headerlink" title="RN 开发技巧"></a>RN 开发技巧</h2><ol>
<li>React-Native 指定模拟器 RUN-IOS <code>react-native run-ios --simulator &quot;iPhone 7”</code>。</li>
<li>MAC 查看端口号被占用及杀死进程。使用命令 lsof -i:port 查看端口号被哪个应用占用，找到 PID(port 是端口号)，再使用命令 kill PID 结束应用(PID 是该应用的编号) 使用 lsof -i 命令可以查看所有进程.查看 mysql 的版本号:mysql -V<a id="more"></a></li>
<li>RN 的 view 和 text 是不具备点击相应功能的，若要如此做，则需要用一个 TouchableHightlight 组件进行包裹。</li>
<li><code>react-native start --port=8088</code>指定端口号</li>
</ol>
<h2 id="RN-开发问题"><a href="#RN-开发问题" class="headerlink" title="RN 开发问题"></a>RN 开发问题</h2><ol>
<li>在使用 react-native-tab-navigator 组件的时候启动报如下错误：<code>Error: Cannot find module &#39;asap/raw&#39;</code>,执行<code>npm i</code></li>
<li>使用<code>react-navigation</code>报错<code>undefined is not an object (evaluating &#39;RNGestureHandlerModules.State&#39;)</code>，<code>yarn add react-navigation</code>and<code>yarn add react-native-gesture-handler</code> <em>(:з ゝ ∠)</em></li>
<li><p>★★★ 重点问题 启动安卓的项目报错。 首先是 gradle 下载很慢 看上面基础搭建第 9 条。其次是 gradle.3.2.1.pom 一直卡住下载不了，首先关闭 shadowsocks 和各种代理试试，<code>build.gradle</code>文件里面加上 <code>google()</code>和<code>maven { url &#39;https://maven.google.com&#39; }</code>试试，如果都不行的话 cd 到桌面 <code>vi .gradle/gradle.properties</code>删除里面的代理代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemProp.http.proxyHost=hostname</span><br><span class="line">systemProp.http.proxyPort=8080</span><br><span class="line">systemProp.http.proxyUser=de\\username</span><br><span class="line">systemProp.http.proxyPassword=xxx</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RN勇者之路]]></title>
      <url>/2018/12/06/RN%E5%8B%87%E8%80%85%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h2 id="披荆斩棘-勇往直前"><a href="#披荆斩棘-勇往直前" class="headerlink" title="披荆斩棘 勇往直前"></a>披荆斩棘 勇往直前</h2><a id="more"></a>
<h2 id="使用-expo-开发-RN"><a href="#使用-expo-开发-RN" class="headerlink" title="使用 expo 开发 RN"></a>使用 expo 开发 RN</h2><h3 id="expo-安装"><a href="#expo-安装" class="headerlink" title="expo 安装"></a>expo 安装</h3><p><a href="https://expo.io/learn" target="_blank" rel="noopener">官网</a></p>
<ol>
<li><code>npm install expo-cli --global</code></li>
<li><code>expo init my-new-project</code></li>
<li><code>cd my-new-project</code></li>
<li><code>expo start</code></li>
</ol>
<h3 id="expo-使用"><a href="#expo-使用" class="headerlink" title="expo 使用"></a>expo 使用</h3><p>如果想要使用 expo 预览项目，那么首先要安装 android 和 ios 的 expo，这个在苹果商店和<a href="https://apkdi.com/cn/host.exp.exponent/Expo" target="_blank" rel="noopener">Android 下载</a>下载安装。原本使用命令启动 expo 项目之后可以通过输入 i 和 a 来自动安装 expo 到模拟器当中，不过因为某些原因报错，现在即使尝试数遍也无法安装，所以必须手动安装 expo 到模拟器。</p>
<ol>
<li>Android 由上面地址将 apk 下载然后拖入 Android 模拟器安装</li>
<li>iOS <a href="https://juejin.im/post/5bd04d06e51d457a997b8b3a" target="_blank" rel="noopener">掘金参考</a> <a href="https://www.jianshu.com/p/dddaa6ec178b" target="_blank" rel="noopener">简书参考</a><ol>
<li>首先下载模拟器构建程序</li>
<li><code>mkdir Exponent-X.XX.X.app &amp;&amp; tar xvf Exponent-X.XX.X.tar.gz -C Exponent-X.XX.X.app</code></li>
<li><code>xcrun simctl install booted [path to Exponent-X.XX.X.app]</code>用具体路径替换包括[]在内的东西。</li>
</ol>
</li>
<li>这样再使用<code>expo start</code>运行项目并输入 i、a 则会分别启动模拟器当中的 expo 来运行项目</li>
</ol>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="TabBarIOS-使用心得"><a href="#TabBarIOS-使用心得" class="headerlink" title="TabBarIOS 使用心得"></a>TabBarIOS 使用心得</h3><ol>
<li>TabBarIOS.Item 里面必须包含一个组件，如果不包含组件，那么使用 selected 或者设置 selected 的时候就会报错:react.children.only expected to receive a single react element child 期望接收单个 react 组件</li>
</ol>
<h3 id="react-native-tab-navigator"><a href="#react-native-tab-navigator" class="headerlink" title="react-native-tab-navigator"></a>react-native-tab-navigator</h3><p><code>npm i react-native-tab-navigator -S</code>。这个 tabbar 组件的好处是双平台效果基本一致，并且使用方式和 tabbarios 挺像。</p>
<h3 id="navigation"><a href="#navigation" class="headerlink" title="navigation"></a>navigation</h3><p>导航组件可以选择<a href="https://github.com/wix/react-native-navigation" target="_blank" rel="noopener"><code>react-native-navigation</code></a>，也可以选择<a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener"><code>react-router</code></a>，还有一个 <a href="https://github.com/react-navigation/react-navigation" target="_blank" rel="noopener"><code>react-navigation</code></a><br>经过查询发现现在使用较多的导航库是<code>react-navigation</code>。<br>使用<code>react-navigation</code>报错<code>undefined is not an object (evaluating &#39;RNGestureHandlerModules.State&#39;)</code>，<code>yarn add react-navigation</code>and<code>yarn add react-native-gesture-handler</code> <em>(:з ゝ ∠)</em>。文档里面有写在非 expo 环境下需要做如此操作，被其他事耽误一下就给忘了。</p>
<h3 id="react-native-keychain-And-react-native-sensitive-info"><a href="#react-native-keychain-And-react-native-sensitive-info" class="headerlink" title="react-native-keychain And react-native-sensitive-info"></a>react-native-keychain And react-native-sensitive-info</h3><p>数据存储，读取 Keychain(ios)。<br><code>react-native-sensitive-info</code>这个提供了 Android 的 Shared Preferences 存储与 iOS 的 Keychain 存储。</p>
<h3 id="ImagePicker"><a href="#ImagePicker" class="headerlink" title="ImagePicker"></a>ImagePicker</h3><p>照相和选图片之前需要获取系统权限许可，expo 获取许可方式如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ImagePicker, Permissions &#125; <span class="keyword">from</span> <span class="string">"expo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> componentWillMount() &#123;</span><br><span class="line">     <span class="comment">// CAMERA_ROLL为具体权限常量</span></span><br><span class="line">    <span class="keyword">const</span> &#123; status &#125; = <span class="keyword">await</span> Permissions.askAsync(Permissions.CAMERA_ROLL)</span><br><span class="line">    <span class="built_in">console</span>.log(status)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasCameraPermission</span>: status === <span class="string">"granted"</span> &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="图标库"><a href="#图标库" class="headerlink" title="图标库"></a>图标库</h3><p><code>react-native-vector-icons</code><br><code>yarn add react-native-vector-icons</code><br><code>react-native link react-native-vector-icons</code>,如果这个命令失败,看一下步骤:</p>
<ol>
<li>添加字体文件（这一步千万不能忘记，不然就算运行成功你也看不到图标）</li>
</ol>
<p>到项目中的 <code>node_modules/react-native-vector-icons/Fonts</code>，里面有很多已经内置的图标库字体文件，依照自己的需求，复制需要的字体文件到 <code>/app/src/main/assets/fonts</code> ( 如果没有这个目录就自行创建 ) 即可。</p>
<ol>
<li><code>android/settings.gradle</code><br><code>include &#39;:react-native-vector-icons&#39;project(&#39;:react-native-vector-icons&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-vector-icons/android&#39;)</code></li>
<li><code>build.gradle</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">   compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class="line">   compile project(&apos;:react-native-vector-icons&apos;) //新添加的</span><br><span class="line">   compile &quot;com.android.support:appcompat-v7:23.0.1&quot;</span><br><span class="line">   compile &quot;com.facebook.react:react-native:+&quot;  // From node_modules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>MainApplication.java</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line"> return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">        new MainReactPackage(),</span><br><span class="line">        //新添加的</span><br><span class="line">        new VectorIconsPackage()</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动图控制"><a href="#启动图控制" class="headerlink" title="启动图控制"></a>启动图控制</h3><p><code>react-native-splash-screen</code><br><a href="https://apetools.webprofusion.com/app/#/" target="_blank" rel="noopener">ape tools</a> 一键生成各个平台的各种图标、启动图</p>
<p><a href="https://blog.csdn.net/f409031mn/article/details/79522129" target="_blank" rel="noopener">参考资料</a></p>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p><a href="https://blog.csdn.net/xiangzhihong8/article/details/80734865" target="_blank" rel="noopener">极光推教程</a></p>
<h3 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h3><ol>
<li><a href="https://github.com/wix/react-native-ui-lib" target="_blank" rel="noopener">react-native-ui-lib</a><br><a href="https://juejin.im/entry/5a76b1696fb9a0635b5303f4" target="_blank" rel="noopener">使用方式</a></li>
<li><a href="https://github.com/rilyu/teaset" target="_blank" rel="noopener">teaset</a></li>
</ol>
<h3 id="RN-未来展望"><a href="#RN-未来展望" class="headerlink" title="RN 未来展望"></a>RN 未来展望</h3><p><a href="https://mp.weixin.qq.com/s/r6mB5Zq3jIf-K2YQi_AS8Q" target="_blank" rel="noopener">携程开源 RN 开发框架 CRN</a><br><a href="https://www.infoq.cn/article/EJYNuQ2s1XZ88lLa*2XT" target="_blank" rel="noopener">京东：庖丁解牛！深入剖析 React Native 下一代架构重构</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[eggjs搭建开发环境]]></title>
      <url>/2018/12/03/eggjs%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Egg-创建、发布及部署-步骤"><a href="#Egg-创建、发布及部署-步骤" class="headerlink" title="Egg 创建、发布及部署 步骤"></a>Egg 创建、发布及部署 步骤</h2><h3 id="创建-Egg-项目"><a href="#创建-Egg-项目" class="headerlink" title="创建 Egg 项目"></a>创建 Egg 项目</h3><p><code>npm init egg</code><br>处理一下 TSLint 的报错问题：根目录<code>tslint.json</code></p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: [<span class="string">"tslint-config-egg"</span>],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"quotemark"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code> 启动 Egg 服务，运行在<code>http://127.0.0.1:7001/</code>地址</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>非 docker：<br><code>npm i egg-scripts --save</code> (本身自带)<br>添加 npm scripts 到 package.json：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"egg-scripts start --daemon"</span>,</span><br><span class="line">    <span class="attr">"stop"</span>: <span class="string">"egg-scripts stop"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个插件对 windows 支持有限，使用此插件可不使用 pm2</p>
<p><code>npm install --production</code><br><code>tar -zcvf ./release.tgz .</code><br>一般报错先查一下端口占用问题,<code>lsof -i:7001</code>,然后杀一下<code>kill -9 pid</code></p>
<h2 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h2><h3 id="Egg-使用-Koa2-中间件"><a href="#Egg-使用-Koa2-中间件" class="headerlink" title="Egg 使用 Koa2 中间件"></a>Egg 使用 Koa2 中间件</h3><ol>
<li><p>在 config 文件夹 <code>config.default.js</code>中设置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add your config here</span></span><br><span class="line">config.middleware = [<span class="string">"jwt"</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在 app/middleware 目录下面(没有则新建) 新建一个上面数组里的同名文件,比如 jwt.js ，然后写入中间件内容即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jwt.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">"koa-jwt"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>☆ 不清楚这种插件是否也是像<code>this.app.**</code>这么使用，并且 config.js 里面配置的插件参数是否可用。</p>
<h3 id="使用插件解决本地开发跨域问题-csrf"><a href="#使用插件解决本地开发跨域问题-csrf" class="headerlink" title="使用插件解决本地开发跨域问题(csrf)"></a>使用插件解决本地开发跨域问题(csrf)</h3><ol>
<li><code>npm i egg-security egg-cors -S</code></li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugin.js</span></span><br><span class="line">exports.security = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">"egg-security"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.cors = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">"egg-cors"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>运行时有黄色警告可能是<code>npm i</code>的时候自动将 security 插件一起装了，提示重复配置，注释了就行。</p>
</li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.default.js</span></span><br><span class="line">config.security = &#123;</span><br><span class="line">  csrf: <span class="literal">false</span>,</span><br><span class="line">  ctoken: <span class="literal">false</span>,</span><br><span class="line">  domainWhiteList: [<span class="string">"http://127.0.0.1:7001"</span>, <span class="string">"http://192.168.1.101:7001"</span>]</span><br><span class="line">&#125;;</span><br><span class="line">config.cors = &#123;</span><br><span class="line">  origin: <span class="string">"*"</span>,</span><br><span class="line">  allowMethods: <span class="string">"GET,HEAD,PUT,POST,DELETE,PATCH"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用-Sequelize-操作-MySQL-数据库"><a href="#使用-Sequelize-操作-MySQL-数据库" class="headerlink" title="使用 Sequelize 操作 MySQL 数据库"></a>使用 Sequelize 操作 MySQL 数据库</h3><ol>
<li>添加 mysql 路径 <code>export PATH=${PATH}:/usr/local/mysql/bin</code></li>
<li><code>source ~/.bash_profile</code> 或者 <code>source ~/.zshrc</code></li>
<li><code>mysql -u root -p</code> 输入密码进入</li>
<li>创建一个数据库<code>create database demo;</code></li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">"study01"</span>, <span class="string">"root"</span>, <span class="string">"965516531"</span>, &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  dialect: <span class="string">"mysql"</span>,</span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    acquire: <span class="number">30000</span>,</span><br><span class="line">    idle: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  operatorsAliases: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">"user"</span>, &#123;</span><br><span class="line">  username: Sequelize.STRING,</span><br><span class="line">  birthday: Sequelize.DATE</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">  .sync()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    User.create(&#123;</span><br><span class="line">      username: <span class="string">"demo"</span>,</span><br><span class="line">      birthday: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1980</span>, <span class="number">6</span>, <span class="number">20</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function"><span class="params">jane</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(jane.toJSON());</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>使用此 js 文件测试数据库是否连接成功。如果使用 mysql8 版本创建数据库，选择使用宽松模式而不是强密码模式，因为大部分第三方库还未对强密码模式进行适配。</p>
</li>
</ol>
<h3 id="使用-egg-redis-连接-redis-数据库"><a href="#使用-egg-redis-连接-redis-数据库" class="headerlink" title="使用 egg-redis 连接 redis 数据库"></a>使用 egg-redis 连接 redis 数据库</h3><ol>
<li>安装 <code>brew install redis</code></li>
<li>启动 <code>brew services start redis</code></li>
<li>停止 <code>brew services stop redis</code></li>
<li>或者使用 redis 自带的启动停止<code>redis-server</code> <code>redis-server --port 6380</code> <code>redis-cli shutdown</code></li>
<li>用法是 <code>this.app.redis</code> 这样使用</li>
</ol>
<h4 id="redis-常用命令"><a href="#redis-常用命令" class="headerlink" title="redis 常用命令"></a>redis 常用命令</h4><ol>
<li>使用<code>redis-cli</code>进入 redis 客户端</li>
<li><code>keys *</code>获取所有的 key 值</li>
<li><code>get key</code>获取 key 对应的值</li>
<li><code>flushall</code>清除所有数据库的所有数据</li>
</ol>
<h3 id="使用-egg-mongoose-连接-mongo-数据库"><a href="#使用-egg-mongoose-连接-mongo-数据库" class="headerlink" title="使用 egg-mongoose 连接 mongo 数据库"></a>使用 egg-mongoose 连接 mongo 数据库</h3><p><code>npm i egg-mongoose --save</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugin.js</span></span><br><span class="line">exports.mongoose = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">"egg-mongoose"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;app_root&#125;/config/config.default.js</span></span><br><span class="line">exports.mongoose = &#123;</span><br><span class="line">  url: <span class="string">"mongodb://127.0.0.1/example"</span>,</span><br><span class="line">  options: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// recommended</span></span><br><span class="line">exports.mongoose = &#123;</span><br><span class="line">  client: &#123;</span><br><span class="line">    url: <span class="string">"mongodb://127.0.0.1/example"</span>,</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;app_root&#125;/app/model/user.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mongoose = app.mongoose;</span><br><span class="line">  <span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    userName: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">    password: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mongoose.model(<span class="string">"User"</span>, UserSchema);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;app_root&#125;/app/controller/user.js</span></span><br><span class="line"><span class="keyword">let</span> nuser = ctx.model.User.create(&#123;</span><br><span class="line">  userName: <span class="string">""</span>,</span><br><span class="line">  phoneNum: ctx.request.body.phoneNum,</span><br><span class="line">  password: ctx.request.body.password,</span><br><span class="line">  email: <span class="string">""</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>一开始建集合之后填入数据老是报一个错<code>E11000 duplicate key error collection</code>,解决方法之一是删了集合重新弄。</p>
<h4 id="mongoose-使用技巧"><a href="#mongoose-使用技巧" class="headerlink" title="mongoose 使用技巧"></a>mongoose 使用技巧</h4><ol>
<li><p>一个值多个字段进行查询</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> ctx.model.User.find(&#123;</span><br><span class="line">  $or: [</span><br><span class="line">    &#123; <span class="attr">phoneNum</span>: <span class="built_in">parseInt</span>(ctx.request.body.username) &#125;,</span><br><span class="line">    &#123; <span class="attr">userName</span>: ctx.request.body.username &#125;,</span><br><span class="line">    &#123; <span class="attr">email</span>: ctx.request.body.username &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询返回指定字段<br> find 方法第一个参数表示查询条件，第二个参数用于控制返回字段，第三个参数用于配置查询参数，第四个参数是回调。如果使用第三个参数而不用第二个参数，那么设置为 null。<br> 如果指定某些字段返回那么设置那个字段值为 1，如果指定某些字段不返回设置值为 0<br><code>let user: any = await ctx.model.User.find({ _id: ok.id }, { password: 0 })</code>,</p>
</li>
</ol>
<p><a href="https://segmentfault.com/a/1190000012095054#articleHeader11" target="_blank" rel="noopener">思否用法</a><br><a href="https://mongoosejs.com/docs/api.html#model_Model.findOne" target="_blank" rel="noopener">官方文档</a><br><a href="https://zhuanlan.zhihu.com/p/34374136" target="_blank" rel="noopener">知乎用法</a></p>
<h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><p>在数据文件目录使用命令导入数据表 <code>mongoimport -d meituan -c areas areas.dat</code> meituan 是数据库名字 areas 是集合(表名) areas.dat 是数据文件。</p>
<h3 id="使用-egg-jwt-进行-Token-的分发"><a href="#使用-egg-jwt-进行-Token-的分发" class="headerlink" title="使用 egg-jwt 进行 Token 的分发"></a>使用 egg-jwt 进行 Token 的分发</h3><ol>
<li><code>npm install egg-jwt --save</code></li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;app_root&#125;/config/plugin.js</span></span><br><span class="line">exports.jwt = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">"egg-jwt"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;app_root&#125;/config/config.default.js</span></span><br><span class="line">exports.jwt = &#123;</span><br><span class="line">  secret: <span class="string">"123456"</span> <span class="comment">//自己设置的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分发 Token<code>const token = app.jwt.sign(userToken, secret, {expiresIn: &#39;1h&#39;})</code></p>
</li>
<li>校验 Tokne <code>const token = ctx.header.authorization</code></li>
<li>解密 Token <code>let payload = await app.jwt.verify(token.split(&#39; &#39;)[1], secret) // // 解密，获取payload</code></li>
</ol>
<p><a href="https://juejin.im/post/5bfc1bcdf265da61273d128a" target="_blank" rel="noopener">参考资料</a><br><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">参数设置</a></p>
<h3 id="JWT-Tokne-的刷新和-sso-单点登录问题"><a href="#JWT-Tokne-的刷新和-sso-单点登录问题" class="headerlink" title="JWT Tokne 的刷新和 sso 单点登录问题"></a>JWT Tokne 的刷新和 sso 单点登录问题</h3><p>使用 Token 进行权限验证，为了防止重放攻击所以一般 token 设置一个过期时间。假如设置 1 小时过期时间，而用户在一小时内不停操作，但是 token 失效，这时候用户就被迫进行重新登录，这是不行的，所以需要 token 刷新。<br>假设一个设备登录 此 id 生成一个 token 正常：验证没问题 超时：redis 找这个 token 的数据 查里面的长 tokne 刷新时间 长 token 过期 app 登录 ❌<br>假设设备登录获取一个 token 时效 30d 未过期登录 查 redis 里面的 id 验证是不是一个 token 不是的话 说明这是老旧的未过期的 tokne  然后直接让让 app 重新登录 登录的时候服务端刷新 token 保证最新 这是 sso 单点登录<br> 但是假如这个 app 在 29 点最后时刻在使用 这时候 token 过期了 服务端返回 token 过期提示 然后 app 根据状态吗重新请求 token ❎<br>直接重新登录 但是这个 token 设置的可以很长<br>这个地方我也奇怪为什么有两个 tokne 的说法：<br><a href="https://segmentfault.com/q/1010000016407530" target="_blank" rel="noopener">JWT 为什么要设置 2 个 token?</a></p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.zhihu.com/question/53123279" target="_blank" rel="noopener">服务器设置了 cookie，浏览器却找不到？</a></p>
<h3 id="使用-UUID-包进行-uuid-的创建"><a href="#使用-UUID-包进行-uuid-的创建" class="headerlink" title="使用 UUID 包进行 uuid 的创建"></a>使用 UUID 包进行 uuid 的创建</h3><h3 id="使用-crypto-js-进行密码的加密"><a href="#使用-crypto-js-进行密码的加密" class="headerlink" title="使用 crypto-js 进行密码的加密"></a>使用 crypto-js 进行密码的加密</h3><p>使用<code>crypto-js</code>模块进行密码加密。</p>
<ol>
<li><code>npm i -save crypto-js</code></li>
<li><code>let CryptoJS = require(&#39;crypto-js&#39;)</code></li>
<li><code>CryptoJS.MD5(***).toString()</code></li>
</ol>
<p><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">crypto-js</a></p>
<h3 id="使用-egg-validate-进行数据的校验"><a href="#使用-egg-validate-进行数据的校验" class="headerlink" title="使用 egg-validate 进行数据的校验"></a>使用 egg-validate 进行数据的校验</h3><ol>
<li><code>npm i egg-validate --save</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line">exports.validate = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">"egg-validate"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line">exports.validate = &#123;</span><br><span class="line">  <span class="comment">// convert: false,</span></span><br><span class="line">  <span class="comment">// validateRoot: false,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用方式:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = &#123;</span><br><span class="line">  phoneNum: <span class="string">"int"</span>,</span><br><span class="line">  email: &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"email"</span>,</span><br><span class="line">    required: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  userName: &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"string"</span>,</span><br><span class="line">    required: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"password"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error = <span class="keyword">this</span>.app.validator.validate(rule, ctx.request.body);</span><br></pre></td></tr></table></figure>
<p>若是 error 不为空，那么就是校验未通过，若是为空就是校验通过。<br>配置项及校验方式等写法参考 parameter:<br><a href="https://github.com/node-modules/parameter" target="_blank" rel="noopener">parameter</a></p>
<h3 id="使用-passport-来进行用户的-第三方-登录鉴权"><a href="#使用-passport-来进行用户的-第三方-登录鉴权" class="headerlink" title="使用 passport 来进行用户的(第三方)登录鉴权"></a>使用 passport 来进行用户的(第三方)登录鉴权</h3><p>不过这个插件的使用，好像是基于使用 egg 来渲染页面然后进行鉴权的方式，而 spa 大多使用 Token 的方式来进行验证。</p>
<h4 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.scienjus.com/install-mysql-on-mac/" target="_blank" rel="noopener">在 Mac 下安装 MySQL</a><br><a href="https://www.jianshu.com/p/65595b0e59ad" target="_blank" rel="noopener">Mac 电脑安装及终端命令使用 mysql</a></p>
<h2 id="TSLint-设置"><a href="#TSLint-设置" class="headerlink" title="TSLint 设置"></a>TSLint 设置</h2><ol>
<li>引入一些没有 d.ts 文件的模块时提示不允许使用 require。解决办法:<code>&quot;no-var-requires&quot;: false,</code></li>
<li><p>必须使用单引号，jsx 中必须使用双引号，去掉 singel 就可以</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"quotemark"</span>: [</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="string">"single"</span>,</span><br><span class="line"><span class="string">"jsx-double"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>对尾随逗号的校验</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"trailing-comma"</span>: [<span class="literal">true</span>, &#123; <span class="comment">//对尾随逗号的校验</span></span><br><span class="line"><span class="string">"multiline"</span>: &#123;</span><br><span class="line">    <span class="string">"objects"</span>: <span class="string">"ignore"</span>,</span><br><span class="line">    <span class="string">"arrays"</span>: <span class="string">"ignore"</span>,</span><br><span class="line">    <span class="string">"functions"</span>: <span class="string">"ignore"</span>,</span><br><span class="line">    <span class="string">"typeLiterals"</span>: <span class="string">"ignore"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"esSpecCompliant"</span>: <span class="literal">true</span> <span class="comment">//是否允许尾随逗号出现在剩余变量中</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>行尾是否以空格结尾(设置成 false 就不用必须加分号)</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">"no-trailing-whitespace"</span>: [<span class="comment">// 不允许空格结尾</span></span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"ignore-comments"</span>,</span><br><span class="line">    <span class="string">"ignore-jsdoc"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="优质资源"><a href="#优质资源" class="headerlink" title="优质资源"></a>优质资源</h2><h3 id="《Node-js-实战-egg-vue-》"><a href="#《Node-js-实战-egg-vue-》" class="headerlink" title="《Node.js 实战(egg+vue)》"></a>《Node.js 实战(egg+vue)》</h3><ol>
<li>书里还有发送邮件的方式 暂时不看</li>
</ol>
<h3 id="egg-shell-decorators（蛋壳）"><a href="#egg-shell-decorators（蛋壳）" class="headerlink" title="egg-shell-decorators（蛋壳）"></a>egg-shell-decorators（蛋壳）</h3><blockquote>
<p>Egg.js 路由装饰器，让你的开发更敏捷~</p>
</blockquote>
<p>自带路由解析和 Swagger。<br><a href="https://super2god.github.io/egg-shell-decorators/#/" target="_blank" rel="noopener">蛋壳</a></p>
<ol>
<li><code>npm install egg-shell-decorators -S</code></li>
<li><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EggShell &#125; <span class="keyword">from</span> <span class="string">"egg-shell-decorators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: Application) =&gt; &#123;</span><br><span class="line">  EggShell(app, &#123; prefix: <span class="string">"/"</span>, quickStart: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>demo</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Get,</span><br><span class="line">  IgnoreJwtAll,</span><br><span class="line">  Description,</span><br><span class="line">  TagsAll</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"egg-shell-decorators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TagsAll</span>(<span class="string">"用户"</span>)</span><br><span class="line"><span class="meta">@IgnoreJwtAll</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> SubOrderController <span class="keyword">extends</span> Controller &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">"/:id"</span>)</span><br><span class="line">  <span class="meta">@Description</span>(<span class="string">"根据id获取用户详情"</span>)</span><br><span class="line">  <span class="keyword">public</span> listUser(&#123; params: &#123; id &#125; &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 swagger-ui<br><a href="https://github.com/super2god/node-swagger-ui" target="_blank" rel="noopener">node-swagger-ui</a><br>作者提供的汉化版 swagger-ui 地址，并且附带使用 express 启动的 index.js 文件。<br>将整个项目 clone 下来，放到 app 目录下面 api-docs 文件夹里面并<code>npm i</code>。</p>
</li>
<li><p>router.js 改造</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; EggShell &#125; <span class="keyword">from</span> <span class="string">"egg-shell-decorators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: Application) =&gt; &#123;</span><br><span class="line">  EggShell(app, &#123;</span><br><span class="line">    prefix: <span class="string">"/"</span>,</span><br><span class="line">    quickStart: <span class="literal">true</span>,</span><br><span class="line">    swaggerOpt: &#123;</span><br><span class="line">      open: <span class="literal">true</span>,</span><br><span class="line">      title: <span class="string">"示例"</span>,</span><br><span class="line">      version: <span class="string">"1.0.0"</span>,</span><br><span class="line">      host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      port: <span class="number">7001</span>,</span><br><span class="line">      schemes: [<span class="string">"http"</span>],</span><br><span class="line">      paths: &#123;</span><br><span class="line">        outPath: <span class="string">"./api-docs/public/json/main.json"</span>,</span><br><span class="line">        definitionPath: <span class="string">"app/definitions"</span>,</span><br><span class="line">        swaggerPath: <span class="string">"app/swagger"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tokenOpt: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">"manager"</span>,</span><br><span class="line">        tokens: &#123;</span><br><span class="line">          manager: <span class="string">"123"</span>,</span><br><span class="line">          user: <span class="string">"321"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ok 这样使用装饰器写的路由便会自动生成可以被 swagger 使用的 json 文档。</p>
</li>
<li><p>在 api-docs 目录里面使用 pm2 启动 index.js，<code>pm2 start index.js</code>，没装 pm2 的话 安装一下<code>npm i pm2 -g</code></p>
</li>
<li>localhost:3001 完工<br><img src="/images/eggjs-swagger-demo1.png" alt="demo"></li>
<li><p>如果你想尽量少些装饰器，使得 controller 看起来不那么臃肿，那么你也可以分开写。将模型写到<code>app/definitions</code>,</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// app/definitions/user.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"User"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"userName"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"姓名"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"phoneNum"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"int32"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"手机号码"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"email"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"邮箱"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"password"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"密码"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>swagger 的 req 和 res 框，写在<code>app/swagger</code>里面</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// app/swagger/user.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"/SignUp"</span>: &#123;</span><br><span class="line">    <span class="attr">"post"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"用户注册"</span>,</span><br><span class="line">      <span class="attr">"parameters"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"body"</span>,</span><br><span class="line">          <span class="attr">"in"</span>: <span class="string">"body"</span>,</span><br><span class="line">          <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"schema"</span>: &#123;</span><br><span class="line">            <span class="attr">"$ref"</span>: <span class="string">"User"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"responses"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">        <span class="attr">"schema"</span>: &#123;</span><br><span class="line">          <span class="attr">"$ref"</span>: <span class="string">"User"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"/VerificationCode"</span>: &#123;</span><br><span class="line">    <span class="attr">"get"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"发送验证码"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保持和 controller 文件夹里面的文件名一致，因为使用了路由映射。<br> controller/user.ts</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Controller &#125; <span class="keyword">from</span> <span class="string">"egg"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Post, Get &#125; <span class="keyword">from</span> <span class="string">"egg-shell-decorators"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> UserController <span class="keyword">extends</span> Controller &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">"/VerificationCode"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> verificationCode() &#123;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      phoneNum: <span class="keyword">this</span>.ctx.query.phoneNum || <span class="string">""</span>,</span><br><span class="line">      code,</span><br><span class="line">      msg: <span class="string">"验证码发送成功!"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">"/SignUp"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> singup() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx, app &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> rule = &#123;</span><br><span class="line">      phoneNum: <span class="string">"int"</span>,</span><br><span class="line">      email: &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">"email"</span>,</span><br><span class="line">        required: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      userName: &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">"string"</span>,</span><br><span class="line">        required: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      password: &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">"password"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> error = app.validator.validate(rule, ctx.request.body);</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">-1</span>,</span><br><span class="line">        msg: error</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> user = <span class="keyword">await</span> ctx.model.User.find(&#123;</span><br><span class="line">        phoneNum: ctx.request.body.phoneNum</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (user.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          code: <span class="number">-1</span>,</span><br><span class="line">          msg: <span class="string">"账号已经注册!"</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nuser = <span class="keyword">await</span> ctx.model.User.create(ctx.request.body);</span><br><span class="line">        <span class="keyword">if</span> (!nuser) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            code: <span class="number">-1</span>,</span><br><span class="line">            msg: nuser</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            code: <span class="number">0</span>,</span><br><span class="line">            msg: <span class="string">"注册成功！"</span></span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>QuickStart 模式会自动帮助我们处理响应体，但这会导致多一层数据嵌套，可以选择在配置里将 QuickStart</p>
</li>
<li>如果使用 egg-jwt 做 token 校验，我们可以使用<code>IgnoreJwt</code>装饰器对当前路由进行忽略校验，使用<code>IgnoreJwtAll</code>可以对 controller 都进行忽略校验。</li>
<li>★★★ 有个问题注意下 蛋壳不是洋葱圈模型而是类似于注入，因此无法在中间件进行拦截，所以上面的 egg-jwt 校验也无法生效，需要手动用 egg 原生的中间件进行校验。 作者大大说找时间解决，waining…</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>做登录的时候有一个重要的问题，就是 token 的刷新问题。具体解决方法见上面 jwt 模块。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB小技巧]]></title>
      <url>/2018/11/26/WEB%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="一些平常会用到的小技巧"><a href="#一些平常会用到的小技巧" class="headerlink" title="一些平常会用到的小技巧"></a>一些平常会用到的小技巧</h1><a id="more"></a>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><ol>
<li>限制输入两位小数并且只允许输入数字。<ol>
<li><code>&lt;input v-mdel=&quot;a&quot;&gt;</code></li>
<li>在 watch 里面监听 a：<code>this.a = parseFloat(this.a.replace(/[^\d.]/g,&quot;&quot;)).toFixed(2)</code></li>
<li><code>&lt;input type=&quot;text&quot; onkeyup=&quot;this.value=this.value.toString().match(/^\d+(?:\.\d{0,2})?/)&quot;/&gt;</code></li>
</ol>
</li>
<li>js 取两位小数 不要四舍五入或四舍五入的方法(toFixed)<ol>
<li>四舍五入 <code>var num=123456.789;</code> <code>var num1=num.toFixed(2) // 123456.79</code></li>
<li>不四舍五入<code>var num2=num.toFixed(3);</code> <code>num2.substring(0,num2.lastIndexOf(&#39;.&#39;)+3) // 123456.78</code></li>
</ol>
</li>
<li><p>js 导出表格 流转表格</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">url, fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.responseType = <span class="string">"blob"</span>;</span><br><span class="line">  <span class="keyword">let</span> _url = url;</span><br><span class="line">  xhr.open(<span class="string">"GET"</span>, _url, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(</span><br><span class="line">    <span class="string">"Authorization"</span>,</span><br><span class="line">    axios.defaults.headers.Authorization</span><br><span class="line">  );</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> response = <span class="keyword">this</span>.response;</span><br><span class="line">      <span class="keyword">let</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL || <span class="built_in">window</span>;</span><br><span class="line">      <span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">      link.href = URL.createObjectURL(response);</span><br><span class="line">      link.download = filename + <span class="string">".xls"</span>;</span><br><span class="line">      <span class="keyword">let</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"MouseEvents"</span>);</span><br><span class="line">      event.initMouseEvent(</span><br><span class="line">        <span class="string">"click"</span>,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="built_in">window</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">      );</span><br><span class="line">      link.dispatchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>js 计算库<br><a href="https://www.iteye.com/news/28410" target="_blank" rel="noopener">4 个用于执行高级数学计算的 JavaScript 库</a><br><a href="https://blog.csdn.net/Suprman/article/details/82596933" target="_blank" rel="noopener">用 JavaScript 实现的一些计算公式</a></p>
</li>
</ol>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol>
<li>水平垂直居中的几种实现方式：<br><a href="!https://juejin.im/post/58f818bbb123db006233ab2a">17 种方式实现水平垂直居中</a><br><a href="!https://www.jianshu.com/p/38beb5ef2511">5 种常用方式实现水平垂直居中</a></li>
</ol>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="H5-图片的预览、旋转、上传"><a href="#H5-图片的预览、旋转、上传" class="headerlink" title="H5 图片的预览、旋转、上传"></a>H5 图片的预览、旋转、上传</h3><p><a href="https://ah.yxlblog.com/index/article/162.html" target="_blank" rel="noopener">资料</a></p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>格式化和 eslint 冲突，<a href="https://github.com/beautify-web/js-beautify" target="_blank" rel="noopener">beautify 文档</a>,设置一下 beautify 的格式化设置。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB知识点]]></title>
      <url>/2018/11/26/WEB%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="总结一些可能不是经常用且容易忘的知识点"><a href="#总结一些可能不是经常用且容易忘的知识点" class="headerlink" title="总结一些可能不是经常用且容易忘的知识点"></a>总结一些可能不是经常用且容易忘的知识点</h1><a id="more"></a>
<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><ol>
<li>addEventListener()第三个参数的介绍和使用<br>给一个 dom 对象添加监听事件<code>addEventListener(&quot;click&quot;,function(){},true);</code>，第一个参数是事件类型，第二个参数是事件函数，第三个参数是 是否是冒泡或者捕获阶段触发，冒泡时触发就是 false，捕获时触发就是 true。<br><a href="https://www.jianshu.com/p/3b3f99984c14" target="_blank" rel="noopener">参考资料 1</a><br><a href="https://blog.csdn.net/c_kite/article/details/71103999" target="_blank" rel="noopener">参考资料 2</a></li>
</ol>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><ol>
<li>外链 css 样式表的时候可以添加媒体查询条件，根据条件下载 css 样式文件。<br><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-width:320px)&quot; href=&quot;test.css&quot;&gt;</code><br>emmm,不过现在项目比较少外链方式，大部分都采用 webpack 打包的方式。</li>
<li>常用媒体查询样式数值(screen)<ol>
<li>1024px、800px、720px、640px、540px、480px、400px、360px、320px</li>
<li>媒体查询断点(根据设备宽度，app):<br><code>@media screen and(max-width:320px){/*针对iPhone4/4s/5/5s*/}</code><br>360px(dpr=3,1080 的屏幕，大部分安卓手机),375px(iPhone6/6s),414px(iPhone6 plus,iPhone6s plus),768px(iPad mini 竖屏设置)</li>
<li>媒体查询断点(根据页面内容设置，pc):按照实际内容切断点。</li>
</ol>
</li>
</ol>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><ol>
<li>使用 chrome 调试安卓手机页面。<ol>
<li>手机连接 PC，打开 USB 开发者调试。</li>
<li>PC Chrome 输入 <code>chrome://inspect</code></li>
<li>手机打开 Chrome 浏览器 此时就可以调试了</li>
</ol>
</li>
<li>使用 Safari 调试 iPhone、iPad 页面。<ol>
<li>Safari 偏好设置-&gt; 高级 -&gt; 打开开发选项卡</li>
<li>iPhone 设置-&gt; Safari -&gt; 高级 打开 js 和 Web 检查器</li>
<li>iPhone usb 连接 Mac</li>
<li>MAC Safari 开发 -&gt; iPhone (可以选择远程连接)</li>
<li>iPhone 使用 Safari 打开网页 此时可以在 MAC Safari 调试页面</li>
</ol>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基于vue-cli3构建基本完善的项目结构]]></title>
      <url>/2018/10/12/%E5%9F%BA%E4%BA%8Evue-cli3%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E5%AE%8C%E5%96%84%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="构建基本完善的项目结构"><a href="#构建基本完善的项目结构" class="headerlink" title="构建基本完善的项目结构"></a>构建基本完善的项目结构</h1><a id="more"></a>
<h2 id="Vue-项目设置"><a href="#Vue-项目设置" class="headerlink" title="Vue 项目设置"></a>Vue 项目设置</h2><ol>
<li><p>开发时跨域设置:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://127.0.0.1:7001/"</span>,</span><br><span class="line">        <span class="comment">// ws: true,</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 域名的话加这个</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">"^/api"</span>: <span class="string">""</span> <span class="comment">//不加这个请求失败</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>router-view</p>
<blockquote>
<p>different router the same component vue。真实的业务场景中，这种情况很多。我创建和编辑的页面使用的是同一个 component,默认情况下当这两个页面切换时并不会触发 vue 的 created 或者 mounted 钩子，官方说你可以通过 watch\$route 的变化来做处理，但其实说真的还是蛮麻烦的。后来发现其实可以简单的在 router-view 上加上一个唯一的 key，来保证路由切换时都会重新渲染触发钩子了。这样简单的多了。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :key=<span class="string">"key"</span>&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    key() &#123;</span><br><span class="line">        return this.$route.name !== undefined? this.$route.name + +new Date(): this.$route + +new Date()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="编辑器设置"><a href="#编辑器设置" class="headerlink" title="编辑器设置"></a>编辑器设置</h2><h3 id="vscode-根据-ESlint-配置保存时自动修改代码"><a href="#vscode-根据-ESlint-配置保存时自动修改代码" class="headerlink" title="vscode 根据 ESlint 配置保存时自动修改代码"></a>vscode 根据 ESlint 配置保存时自动修改代码</h3><ol>
<li>首先安装 <code>ESLint Vetur Prettier</code>三个插件</li>
<li><p><code>setting.json</code>里面配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"eslint.autoFixOnSave": true,</span><br><span class="line">"eslint.validate": [</span><br><span class="line">  "javascript",</span><br><span class="line">  "javascriptreact",</span><br><span class="line">  "html",</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">    <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">"eslint.options": &#123;</span><br><span class="line">  "plugins": ["html"]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这样 vscode 就会根据<code>.eslintrc.js</code>里面的配置提醒保存并在保存的时候自动修复。</p>
</li>
<li><p>可能会遇到点小问题。若有报错你可能会根据提示安装<code>eslint-plugin-html</code>模块，或者 vscode 在保存格式化代码的时候自动添加了分号，而你的 eslint 配置不允许添加分号，可以在<code>setting.json</code>里面设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"prettier.semi": false,</span><br><span class="line">"vetur.format.defaultFormatter.js": "vscode-typescript"</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="WebStorm-根据-ESlint-格式化代码"><a href="#WebStorm-根据-ESlint-格式化代码" class="headerlink" title="WebStorm 根据 ESlint 格式化代码"></a>WebStorm 根据 ESlint 格式化代码</h3><ol>
<li>ws 会自动根据项目中的 eslint 配置进行提示，当然也可以换一个配置文件。<code>Preferences | Language &amp; Frameworks | JavaScript | Code Quality Tools | ESLint-&gt;Configuration file</code></li>
<li>快捷键设置，keymap 里面搜索 eslint,修改<code>Fix ESLint Problems</code>的快捷键。</li>
<li>设置 ok 开始 code。</li>
</ol>
<h2 id="第三方库安装"><a href="#第三方库安装" class="headerlink" title="第三方库安装"></a>第三方库安装</h2><h3 id="如何安装-Zepto-AMD-规范类库"><a href="#如何安装-Zepto-AMD-规范类库" class="headerlink" title="如何安装 Zepto(AMD 规范类库)"></a>如何安装 Zepto(AMD 规范类库)</h3><p>具体原因参考此文章:<a href="!https://sebastianblade.com/how-to-import-unmodular-library-like-zepto/">原因</a><br>不过网上大部分解决方法适用于直接改 webpack 的配置，而 vue-cli3 由于使用了<a href="!https://github.com/neutrinojs/webpack-chain"><code>webpack-chain</code></a>对 webpack 配置进行了再次封装，所以需要在<code>vue.config.js</code>里面略作修改。</p>
<ol>
<li><code>npm i script-loader exports-loader -D</code></li>
<li>创建<code>vue.config.js</code></li>
<li><p>vue.config.js 如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"zepto"</span>)</span><br><span class="line">      .test(<span class="built_in">require</span>.resolve(<span class="string">"zepto"</span>))</span><br><span class="line">      .use(<span class="string">"exports"</span>)</span><br><span class="line">      .loader(<span class="string">"exports-loader?window.Zepto"</span>)</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">"script"</span>)</span><br><span class="line">      .loader(<span class="string">"script-loader"</span>)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;,</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">        $: <span class="string">"zepto"</span>,</span><br><span class="line">        Zepto: <span class="string">"zepto"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>main.js</code>里面引用<code>zepto</code>模块.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">"zepto"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"zepto/src/fx"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="第三方库设置"><a href="#第三方库设置" class="headerlink" title="第三方库设置"></a>第三方库设置</h2><h3 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h3><p>封装 axios 的方法网上一搜一堆，具体怎么设置看个人喜好，这里简单贴一段代码和几个链接。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.BASE_API, <span class="comment">// api 的 base_url</span></span><br><span class="line">  timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">request.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">// for debug</span></span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// respone拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: <span class="string">"error"</span>,</span><br><span class="line">      duration: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>
<p>至于这个地方没有使用 axios 全局拦截，是因为这个文件将 axios 再封装后，全局拦截器拦截不到使用 request 的请求。当拦截进入异常时就会调用 element-ui 的提示进行异常提示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">"/user/info"</span>,</span><br><span class="line">    method: <span class="string">"get"</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码基本取自 <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a> 的代码。</p>
<h2 id="vue-cli3-插件制作——一键配置属于自己的项目"><a href="#vue-cli3-插件制作——一键配置属于自己的项目" class="headerlink" title="vue-cli3 插件制作——一键配置属于自己的项目"></a>vue-cli3 插件制作——一键配置属于自己的项目</h2><p><a href="https://www.npmjs.com/package/@xaviershi/vue-cli-plugin-xaviershi-pc" target="_blank" rel="noopener">npm pc 端</a><br><a href="https://www.npmjs.com/package/@xaviershi/vue-cli-plugin-xaviershi-phone" target="_blank" rel="noopener">npm 移动端</a><br></p>
<h3 id="关于-Sass、Less、Stylus-引用全局变量的问题"><a href="#关于-Sass、Less、Stylus-引用全局变量的问题" class="headerlink" title="关于 Sass、Less、Stylus 引用全局变量的问题"></a>关于 Sass、Less、Stylus 引用全局变量的问题</h3><blockquote>
<p>官方文档:向预处理器 Loader 传递选项</p>
</blockquote>
<p>sass:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      <span class="comment">// 给 sass-loader 传递选项</span></span><br><span class="line">      sass: &#123;</span><br><span class="line">        <span class="comment">// @/ 是 src/ 的别名</span></span><br><span class="line">        <span class="comment">// 所以这里假设你有 `src/variables.scss` 这个文件</span></span><br><span class="line">        data: <span class="string">`@import "~@/variables.scss";`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>less:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        globalVars: &#123;</span><br><span class="line">          color: <span class="string">"#ccc"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>stylus:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      stylus: &#123;</span><br><span class="line">        <span class="keyword">import</span>: path.resolve(__dirname, <span class="string">"./src/config/common.styl"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/jjucap/p/10120396.html" target="_blank" rel="noopener">参考文章 博客园</a></p>
<h2 id="关于项目里面-eslint-配置问题及常用命令"><a href="#关于项目里面-eslint-配置问题及常用命令" class="headerlink" title="关于项目里面 eslint 配置问题及常用命令"></a>关于项目里面 eslint 配置问题及常用命令</h2><p><a href="https://blog.csdn.net/qq_20087231/article/details/83821264" target="_blank" rel="noopener">命令参考资料</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.infoq.cn/article/kiXMfTdkpiuo_eQWTIyV" target="_blank" rel="noopener">如何使用 Vue CLI 3 加速你的开发工作流？</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于移动端适配的几个简单解决办法(vue)]]></title>
      <url>/2018/07/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95(vue)/</url>
      <content type="html"><![CDATA[<h2 id="关于移动端适配的几个简单解决办法-vue"><a href="#关于移动端适配的几个简单解决办法-vue" class="headerlink" title="关于移动端适配的几个简单解决办法(vue)"></a>关于移动端适配的几个简单解决办法(vue)</h2><p>对移动端适配原理进行简单介绍，并提供几个适用于 vue 项目的移动端适配解决方案。</p>
<a id="more"></a>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>首先要了解一下关于适配的基础知识。<br><a href="http://www.cnblogs.com/xiaohuochai/p/5494624.html" target="_blank" rel="noopener">移动 web 开发之像素和 DPR</a><br><a href="https://www.jianshu.com/p/2e20f868f385" target="_blank" rel="noopener">适配的基础知识</a><br>总结：</p>
<ol>
<li>px 又称像素。有两种像素概念，一种是网页设计中使用的 css 像素(逻辑像素)，一种是原生移动系统使用的设备像素。一个 CSS 像素对应多少个设备像素是根据当前的缩放比例(dpr)来决定的，即 css 像素可能包含多个设备像素。</li>
<li>物理像素的大小在不同设备上不一定相等。体现为屏幕像素密度不同(ppi)，可以对比一下电脑和手机上的像素点大小。</li>
<li>DPR 设备像素比 <code>DPR = 设备像素 / CSS像素(某一方向上)</code>，dpr 为 2 的设备，一个 css 像素含有 4 个物理像素，dpr 为 3 的设备，一个 css 像素含有 9 个物理像素。</li>
<li>我们在 viewport(虚拟布局窗口)上面布局，然后通过 meta 标签 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</code> 做一些设置之后渲染到设备上。</li>
<li>css 像素数跟设备大小没关系，因为不同的设备单个物理像素是不一样的。css 像素数 = 分辨率宽/dpr。例如 iphone6 dpr=2 分辨率 750x1334,打印它的宽 为 375px。红米 note2A 分辨率 1920x1080 dpr=3 打印为 360px。另外 iphone6plus 分辨率 1920x1080 打印是 414px，原因是它的 dpr=2.6。</li>
<li> 为什么推荐使用 rem 来做适配单位<a href="https://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="noopener">CSS3 的 REM 设置字体大小</a></li>
</ol>
<h3 id="rem-适配方式概念"><a href="#rem-适配方式概念" class="headerlink" title="rem 适配方式概念"></a>rem 适配方式概念</h3><p>rem 适配方式并不是只有一种，这种方式的核心理论是 动态计算 页面宽度/一个比例值（比如 10 或者 15）= 1rem。这里放一个 demo，以 iphone6 设计稿里面元素的尺寸除以 100 得到的就是最终的 rem 值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">"DOMContentLoaded"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>].style.fontSize =</span><br><span class="line">        <span class="built_in">window</span>.innerWidth / <span class="number">7.5</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>所以哪怕不是除以 7.5 而是其他的比例转化为 rem 或者不同的页面宽度计算和 js 引入，也是属于 rem 方式的一种。</p>
<h3 id="目标问题"><a href="#目标问题" class="headerlink" title="目标问题"></a>目标问题</h3><p>适配需要解决问题：</p>
<ol>
<li>1px 边框问题</li>
<li>图片适配</li>
<li>字体适配</li>
<li>元素自适应</li>
<li>横竖屏适配</li>
</ol>
<h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p>介绍关于像素单位的基本知识，原因在于适配方案大部分都是基于单位来进行适配的。<br> 直接使用 px 方式做适配的方案这里就不说了，重点放在 rem 适配方式和 vw 适配方式上面。同时秉着简单、方便的原则，将会尽量避免与第三方 UI 库发生冲突，以便于开发者借助 UI 库迅速开发。</p>
<h4 id="rem-适配一"><a href="#rem-适配一" class="headerlink" title="rem 适配一"></a>rem 适配一</h4><p>第一种 rem 适配，可以参考<a href="https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html" target="_blank" rel="noopener">使用 Flexible 实现手淘 H5 页面的终端适配</a><br>这种方式引入<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a>这个库，具体适配方法是先根据设备的 dpr 进行页面缩放，然后再使用 rem 进行适配。<br>这种方式的好处是根据 dpr 进行了缩放，所以 1px 边框以及一些适配问题都迎刃而解，效果显示细腻。<br>坏处是缩放相当于改变了原先的 css 单位，所以绝大部分 UI 库都无法使用，也即这种方式可能适用于从 0 开始做东西。而且细节部分较多，不留神可能容易出错。这种方式是比较早的方式，淘宝基本已经不用了，部分开发者还是有使用这种方式。</p>
<h3 id="vw-适配方案"><a href="#vw-适配方案" class="headerlink" title="vw 适配方案"></a>vw 适配方案</h3><p>后来手淘团队又出了 vw 适配方案。<a href="https://www.w3cplus.com/css/vw-for-layout.html" target="_blank" rel="noopener">再聊移动端页面的适配</a><br>这种方案使用 vw 单位做适配。理论其实跟 rem 方案差不多，区别就是使用了原生支持的 vw 而不用 rem，不过我现在不是很看好它的兼容性问题，手淘团队为了兼容做了一套方案，暂时不过多研究，这种方案以后可能会成为适配主流。</p>
<h3 id="rem-适配二"><a href="#rem-适配二" class="headerlink" title="rem 适配二"></a>rem 适配二</h3><p>这个方式其实就是普通的 rem 适配方案在 vue 项目里的应用。秉着前端自动化的原则，使用 postCSS 插件对单位自动做了处理，这样既能与 UI 库和平共存，又能自动 px 转 rem 单位。</p>
<ol>
<li>新建一个 vue 项目</li>
<li><code>npm i postcss-pxtorem --save-dev</code></li>
<li>在项目根目录下 <code>.postcssrc.js</code> 文件里面添加</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">"postcss-import"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"postcss-url"</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// to edit target browsers: use "browserslist" field in package.json</span></span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 刚才安装的插件 如下</span></span><br><span class="line">    <span class="string">"postcss-pxtorem"</span>: &#123;</span><br><span class="line">      rootValue: <span class="number">16</span>,</span><br><span class="line">      propList: [<span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol>
<li>项目根目录 main.js 里面引入一个 js，内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">"DOMContentLoaded"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">"html"</span>)[<span class="number">0</span>].style.fontSize =</span><br><span class="line">        <span class="built_in">window</span>.innerWidth / <span class="number">23.4375</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  );</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<ol>
<li>这样 样式单位使用 px 就会被转换成 rem 了。<br><img src="/images/100px.png" alt="100px"><br><img src="/images/100pxTo6.25rem.png" alt="100pxToRem"><br><img src="/images/100px代码.png" alt="100px代码"><br><a href="https://github.com/cuth/postcss-pxtorem" target="_blank" rel="noopener">postcss-pxtorem</a><br>而且这个插件也可以做一些配置，例如设置 写 Px 则不会进行转换等。</li>
<li>这样基于 vue 的自动化适配基本就完成了。通过设置在 iPhone6 尺寸下 1rem = 16px，不会影响 UI 库的使用(也可以设置为 14px，调节上方 23.4375 即可)，也通过 postcss 插件进行了自动转化。</li>
</ol>
<h3 id="几个适配问题的解决方法"><a href="#几个适配问题的解决方法" class="headerlink" title="几个适配问题的解决方法"></a>几个适配问题的解决方法</h3><h4 id="1px-边框问题"><a href="#1px-边框问题" class="headerlink" title="1px 边框问题"></a>1px 边框问题</h4><p><a href="https://segmentfault.com/a/1190000007604842" target="_blank" rel="noopener">移动 web 1 像素边框 瞧瞧大公司是怎么做的</a><br><a href="https://juejin.im/entry/584e427361ff4b006cd22c7c" target="_blank" rel="noopener">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a><br><a href="http://myronliu.com/2017/03/22/%E7%A7%BB%E5%8A%A8web/css_harline/" target="_blank" rel="noopener">移动 web 1px 边框解决方案</a><br>总结：如果是 ios7 之后的版本，那么可以直接用 0.5px，不过安卓就 emmm。<br>比较好的几个办法：</p>
<ol>
<li>伪元素缩放</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#test1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 圆角 */</span></span><br><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.5, 0.5);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5, 0.5);</span><br><span class="line">  <span class="attribute">-webkit-transform-origin</span>: top left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>图片替换</li>
<li>颜色渐变</li>
<li>阴影</li>
</ol>
<h3 id="图片和字体适配"><a href="#图片和字体适配" class="headerlink" title="图片和字体适配"></a>图片和字体适配</h3><p>使用 rem 适配方式二，一般不管 dpr=2 还是 dpr=3，设置图片原先一半的尺寸就是高清。dpr=2 和 dpr=3 差别很小。<br>字号也是平常的设计稿尺寸除以 2。如果移动设备屏幕太大可能会导致字号显示过大，如有需要单独进行样式设置。</p>
<h4 id="img-标签图片适配"><a href="#img-标签图片适配" class="headerlink" title="img 标签图片适配"></a>img 标签图片适配</h4><p>这个方法直接使用 css 的 srcset 和 sizes 属性进行响应式渲染，具体使用:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"../assets/test@2x.jpg"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">"../assets/test@2x.jpg 128w, ../assets/test@3x.jpg 256w"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"128px"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个 src 保底兼容 IE，然后根据 sizes 计算的宽度来命中使用哪个图片。<br>支持 chrome38+ 但是 IE 不支持<br>参考<a href="https://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/" target="_blank" rel="noopener">响应式图片 srcset 全新释义 sizes 属性 w 描述符</a></p>
<h4 id="背景图倍图适配"><a href="#背景图倍图适配" class="headerlink" title="背景图倍图适配"></a>背景图倍图适配</h4><p>用 stylus 做的例子，使用 css 预编译器的方法，将路径和类型传递过去:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bg</span>(<span class="selector-tag">url</span>, <span class="selector-tag">type</span>) &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(url+<span class="string">"."</span>+type);</span><br><span class="line"></span><br><span class="line">  @media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">url</span>+"@<span class="keyword">2x</span>."+<span class="keyword">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">url</span>+"@<span class="keyword">3x</span>."+<span class="keyword">type</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  bg('../assets/test', 'jpg');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能根据 dpr 选择图片。</p>
<h3 id="横竖屏适配"><a href="#横竖屏适配" class="headerlink" title="横竖屏适配"></a>横竖屏适配</h3><p><a href="https://aotu.io/notes/2017/10/18/landscape_mode_in_html5_game/index.html" target="_blank" rel="noopener">H5 游戏开发：横屏适配</a><br><a href="https://github.com/sunmaobin/sunmaobin.github.io/issues/28" target="_blank" rel="noopener">移动端 H5 解惑-页面适配（二）</a></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>一些参考文章上面已给出链接。<br><a href="https://juejin.im/entry/56ce78eac24aa800545af276" target="_blank" rel="noopener">移动端高清、多屏适配方案 - 移动端 H5 - 前端乱炖</a><br><a href="https://juejin.im/post/5cddf289f265da038f77696c#comment" target="_blank" rel="noopener">掘金 🐂🍺dalao-图文并茂 10 大重点讲解移动端适配必备知识</a></p>
]]></content>
      
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS高级-一刷红宝书]]></title>
      <url>/2018/05/14/JS%E9%AB%98%E7%BA%A7-%E4%B8%80%E5%88%B7%E7%BA%A2%E5%AE%9D%E4%B9%A6/</url>
      <content type="html"><![CDATA[<h2 id="JS高级-一刷红宝书"><a href="#JS高级-一刷红宝书" class="headerlink" title="JS高级-一刷红宝书"></a>JS高级-一刷红宝书</h2><h3 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h3><ul>
<li><p>文档对象模型(DOM)</p>
<blockquote>
<p>很多语言也实现了DOM，但是DOM已经成为了JavaScript中的一个重要组成部分  </p>
</blockquote>
</li>
<li><p>JavaScript由ECMAScript + 文档对象模型(DOM) + 浏览器对象模型(BOM)组成</p>
</li>
<li>浏览器http请求限制 8以内<br><a href="https://www.zhihu.com/question/20474326" target="_blank" rel="noopener">浏览器允许的并发请求资源数是什么意思？</a><br><a href="http://www.cnblogs.com/liuyanan/p/5242192.html" target="_blank" rel="noopener">页面优化——减少HTTP请求数</a>  </li>
<li>为什么使用CDN的原因<br>启用与主站域名不同的网站提供静态服务可以减少cookies传送 有的时候cookies体积很大，而每一个请求都会携带cookies往返，占用时间和带宽较大,并且能够减少服务器带宽 节约资源<a id="more"></a>
<h3 id="在HTML中使用JavaScript"><a href="#在HTML中使用JavaScript" class="headerlink" title="在HTML中使用JavaScript"></a>在HTML中使用JavaScript</h3></li>
<li><p>script标签的属性<br><a href="http://www.cnblogs.com/AndyWithPassion/archive/2011/09/03/2165441.html" target="_blank" rel="noopener">script之defer&amp;async</a><br><a href="http://www.w3school.com.cn/html5/att_script_async.asp" target="_blank" rel="noopener">HTML 5 script async 属性</a>  </p>
<blockquote>
<p>async 下载后立即执行 defer 文档解析后执行</p>
</blockquote>
</li>
<li><p>外部js文件的后缀名不一定是js 但是要确保服务器返回正确的MIME类型  </p>
</li>
<li>为什么要将script标签放在页面后面<br>浏览器在遇到<code>&lt;body&gt;</code>标签时才开始呈现页面内容,如果将script标签放在head里面会导致浏览器必须将全部js下载、解析、执行，js代码过多会导致页面出现明显延迟，表现为白屏，因此现代WEB应用一般将script标签放在<code>&lt;/body&gt;</code>前面。</li>
<li>js代码放入外部文件<br>1. 可维护性  <ol>
<li>共用js提高页面加载速度  </li>
<li>不与浏览器解析html冲突</li>
</ol>
</li>
<li>noscript标签用于在不支持js或者禁用js的浏览器上面插入内容<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3></li>
<li><code>var message</code>这种未初始化的变量保存一个特殊的值 undefined  </li>
<li>JS数据类型拥有动态性，相同的变量可以用作不同的类型。</li>
<li>调用<code>typeof null</code>返回一个对象类型 特殊值null被认作是空的对象引用</li>
<li><code>typeof **</code>返回的undefined可能是未初始化也可能是未声明 </li>
<li><code>null == undefined</code> true <code>null === undefined</code> false</li>
<li>number类型 IEEE754格式</li>
<li><code>typeof NaN</code> number</li>
<li>任何涉及NaN的操作都会返回NaN NaN与任何值不等 包括它自己 </li>
<li>在chrome中 任何数值除以0都会返回 Infinity</li>
<li>字符串创建之后不可变 赋值是重新生成空间然后销毁替换</li>
<li>对一个对象里面的数组使用for in 遍历 可能会出问题 遍历结果和数组并不一样</li>
<li>arguments获取的是传的参数个数而不是定义时的参数个数<h3 id="变量、作用域、内存问题"><a href="#变量、作用域、内存问题" class="headerlink" title="变量、作用域、内存问题"></a>变量、作用域、内存问题</h3></li>
<li>所谓的函数参数按值传递：<br>基本类型变量复制是复制的值，复制完毕不会互相影响<br>引用类型变量复制的是引用地址即指针，复制完毕会互相影响<br>而函数接受的参数 就是单纯的值 可能是值或指针<br>但是如果重新new一个obj那么新的obj做的改变不会指向外部的对象</li>
<li>用typeof检测基本数据类型 用instanceof检测引用数据类型 </li>
<li>一般函数内部的this指向的是调用函数的环境 但是使用new构造一个实例会改变this的指向</li>
<li>try catch和with能延长作用域链</li>
<li>内存回收<br>一般是采用标记清除的方式回收而不是采用引用计数的方式回收  </li>
<li>手动回收内存<br>除了调用浏览器提供的方法 手动的一个方法是将全局变量设置为null 局部变量一般不用关心 -这种做法叫解除引用</li>
<li>基本类型值占据大小固定空间 在栈内存中  引用类型的值是对象 在堆内存中<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3></li>
<li>array能通过使用push、pop、shift、unshift来实现栈和队列等 </li>
<li>push方法在数组末尾添加元素</li>
<li>pop方法移除数组末尾的元素</li>
<li>shift方法移除数组开头的元素</li>
<li>unshift方法向数组开头添加元素 </li>
<li>可以用push+pop实现栈 用push+shift实现队列 unshift+pop实现反向队列</li>
<li>数组除了操作数组的几个方法 concat、includes、indexOf、join、lastIndexOf、slice  </li>
<li>几个迭代方法 every、some、filter、find、findIndex、forEach、keys、map、reduce、reduceRight、values</li>
<li>Date类型 JSON.stringify(new Date()) 和Date.toString()不一样  </li>
<li>处理时间的库 <a href="https://github.com/iamkun/dayjs" target="_blank" rel="noopener">dayjs</a>  <a href="https://github.com/moment/moment" target="_blank" rel="noopener">momentjs</a></li>
<li>使用var创建普通变量会引起变量提升 使用函数声明也会引起变量提升 但是使用函数表达式并不会引起变量提升</li>
<li>函数如果没有return则返回undefined 有则返回return的值</li>
<li>函数内部arguments对象的callee方法指向自身函数</li>
<li>arguments的caller指向调用自身函数的函数的引用</li>
<li>函数的apply()和call()能改变this的指向 第一个参数都是传的作用域 即可以传对象等 第二个参数是参数值 apply能传数组和arguments call只能列出每一项传 不过es6有…方式进行解构赋值</li>
<li>bind方法也能绑定this的值<br>- 基本数据类型是没有方法的 那么为什么能直接使用方法呢 例如 a1.substring(2)<br>这是因为js做了如下操作<br>当执行上述代码时 访问a1处于一种读取模式  <ol>
<li>创建String类型的一个实例</li>
<li>在实例上调用指定的方法</li>
<li>销毁这个实例 </li>
</ol>
</li>
<li>js 三种特殊引用类型 String Boolean Number  称作基本包装类型</li>
<li>引用类型和基本包装类型的区别是对象的生存期问题</li>
<li>字符串操作方法  <ol>
<li>concat()连接字符串 不过现在一般用+</li>
<li>slice substr substring</li>
<li>indexOf lastIndexOf</li>
<li>trim 去空格</li>
<li>toLowerCase toUpperCase toLocalLowerCase toLocalUpperCase</li>
<li>match 方法与正则的 exec()方法相同</li>
<li>search replace search返回索引值 </li>
<li>split分割字符串成数组</li>
</ol>
</li>
<li>全局对象 Global<br>parseInt()等方法其实都是属于Global的方法  encodeURI() decodeURI() encodeURIComponent() </li>
<li>web浏览器将Global实现在了window对象中</li>
<li><p>Math</p>
<ul>
<li><p>min和max方法 一般是将很多参数当参数传入 但是也可以这么做</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, a) <span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, a) <span class="comment">//98</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>舍入方式 Math.ceil()向上取整 Math.floor()向下取整 Math.round()标准取整</p>
</li>
<li>Math.random()随机数方法 Math.floor(Math.random()*一个整数+一个整数)</li>
<li>遍历数组用for循环、for of forEach 尽量不用for in <h3 id="面向对象的程序设计"><a href="#面向对象的程序设计" class="headerlink" title="面向对象的程序设计"></a>面向对象的程序设计</h3></li>
</ul>
</li>
<li>属性类型<ul>
<li>数据属性<br>包含 可定义 可枚举 可读写 value值</li>
<li>访问器属性<br>包含getter setter方法 必须用defineProperty()来定义</li>
<li>在js中 可以对任何对象 包括DOM和BOM对象 使用Object.getOwnPropertyDescriptor()方法</li>
</ul>
</li>
<li><p>创建对象 ★★★★★</p>
<ol>
<li>工厂模式  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.age = age</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'nick'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>解决创建多个相似对象的问题，却没有解决对象识别问题</p>
<ol>
<li>构造函数模式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.job = job</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'nick'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>没有显示的创建对象</li>
<li>将属性和方法直接赋值给了this对象</li>
<li>没有return 语句</li>
<li>开头使用了大写P 这是想OO语言看齐 </li>
<li>必须使用new操作符创建实例 使用new操作符经历了以下过程<ul>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象 因此this就指向了这个对象</li>
<li>执行构造函数代码 添加属性和方法</li>
<li>返回新对象</li>
</ul>
</li>
<li>这两种创建的对象不大一样 </li>
<li>构造函数创建的对象的constructor(构造函数)属性 指向Person 最初是用来标识对象类型的 使用<code>person1 instanceof Objcet</code>返回true <code>person1 instanceof Person</code>返回true </li>
<li>构造函数创建的每一个实例的方法都是不相等的 因为函数是对象 定义一个函数就相当于创建了一个对象  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person3.sayName == person4.sayName  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>于是他们把共同作用的函数拿出来做成全局函数 然后每个实例的引用指向这个函数  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">然后问题又来了，首先这个全局函数只能对象用，不符合全局函数的定义，其次如果方法很多就要定义很多全局函数，那么这个类就没有封装性可言了  </span></span><br><span class="line"><span class="string">2. 原型模式</span></span><br><span class="line"><span class="string">&gt; 程序员真会玩  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  User.prototype.name = <span class="string">'Mike'</span></span><br><span class="line">  User.prototype.age = <span class="number">29</span></span><br><span class="line">  User.prototype.job = <span class="string">'Software Engineer'</span></span><br><span class="line">  User.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> user1 = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>prototype 就是通过调用构造函数而创建的那个对象实例的原型对象  </p>
</blockquote>
<ul>
<li>Object.getPrototypeOf()方法取得实例的原型对象 </li>
<li>对象实例的属性和方法会覆盖原型的属性和方法 但是不会修改 使用delete操作符删除实例属性并能回复对原型访问 </li>
<li>使用hasOwnProperty()方法判断属性在实例中还是在原型中，返回true代表在实例中 hasOwnProperty是从Object继承而来的</li>
<li>为原型添加方法或属性或者修改，能够立即在所有对象实例中反应出来</li>
<li>原型模式共享属性和方法既是优点也是缺点</li>
<li>不能在实例化对象之后使用字面量方式重写原型 否则会切断现有实例与新原型之间的联系</li>
</ul>
</li>
</ul>
<ol>
<li><p>组合使用构造函数模式和原型模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.job = job</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>]</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  sayName: function () &#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'software engineer'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>)</span><br></pre></td></tr></table></figure>
<p>集合两种模式之长，是现在使用最广泛、认同度最高的一种创建自定义类型的方法</p>
</li>
<li>动态原型模式<br>在构造函数中添加一个初始化原型方法的if语句</li>
<li>寄生构造函数模式 稳妥构造函数模式</li>
</ol>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>js只支持实现继承 并且主要依靠原型链来实现继承  </p>
<ul>
<li>原型链继承实现<ol>
<li>简单点来说就是定义一个father类型</li>
<li>father类型加点原型方法 </li>
<li>定义一个children类型 children原型 = father的实例</li>
<li>children类型加点原型方法</li>
<li>结果：father类型有自己的原型方法 children类型有father类型实例的属性和方法还有它自己定义的方法</li>
</ol>
</li>
<li>注意使用对象字面量方式替换原型 很可能会导致切断联系</li>
<li>原型链的两个问题：1 子类型的所有实例会共享父类型的引用类型值 比如数组 2 子类型创建实例的时候，不能在不影响所有对象实例的情况下向超类型的构造函数中传递参数</li>
<li><p>借用构造函数  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>借用构造函数是能解决上面两个问题的，不过它也有自己的问题，那就是方法都定义在构造函数中 子类没法用超类定义的方法</p>
</li>
<li><p>组合继承<br>组合继承，有时候也会叫做伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种模式。其背后思路是使用原型链实现对原型属性和方法的继承，使用借用构造函数来实现对实例属性的继承。这样既能在原型上定义方法实现了函数复用，有能够保证每个势力都有他自己的属性！  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数 继承属性</span></span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()</span><br><span class="line">SubType.prototype.constructor = SubType</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'Nicholas'</span>, <span class="number">29</span>)</span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);</span><br><span class="line">instance1.sayName()</span><br><span class="line">instance1.sayAge()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">'Greg'</span>, <span class="number">27</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);</span><br><span class="line">instance2.sayName()</span><br><span class="line">instance2.sayAge()</span><br><span class="line"></span><br><span class="line">[ <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>, <span class="string">'black'</span> ]</span><br><span class="line">Nicholas</span><br><span class="line"><span class="number">29</span></span><br><span class="line">[ <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span> ]</span><br><span class="line">Greg</span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原型式继承<br>Object.create() 以传入的对象做原型创建一个新的对象  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'make'</span>,</span><br><span class="line">  friends: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="built_in">Object</span>.create(person, &#123;</span><br><span class="line">  age: &#123;</span><br><span class="line">    value: <span class="number">12</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(person1.age); <span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">//make</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>直接打印person1不显示，但是能.出来 因为属性都在原型里面。潜复制 引用指向相同的值</p>
<ul>
<li>寄生式继承<br>核心是封装继承过程的函数，步骤是 调用函数创建一个新对象 增强这个对象 返回这个对象</li>
<li>寄生组合式继承<br>组合式继承虽然使用最广泛，但是他调用超类的构造函数有两次。于是程序员们使用寄生组合式继承，在<code>SubType.prototype = new SuperType()</code>第一次调用构造函数的这个地方更改为寄生式继承的方式 即  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype)</span><br><span class="line">  prototype.constructor = subType</span><br><span class="line">  subType.prototype = prototype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>相当于在继承的时候子类原型只接受了父类原型，而没有调用构造函数</p>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数有函数声明提升，使用函数表达式创建的函数没有声明提升</p>
<blockquote>
<p>闭包：闭包是指有权访问另一个函数作用域中的变量的函数。</p>
</blockquote>
<p>最简单的闭包就是函数里面写一个函数。<br>调用函数发生的事：创建一个执行环境 创建一个活动对象 内部包含arguments 命名参数等 一般函数执行完毕后活动对象就被销毁 但是闭包引用了活动对象的值就不会令它简单销毁  </p>
<ul>
<li>闭包与变量  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    res[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = a()</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">这段代码的返回结果是 `</span>[ [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>],</span><br><span class="line">  [<span class="built_in">Function</span>] ]<span class="string">` 一个函数数组，但实际上 每个函数都返回10，因为每个函数的作用域链都保存着a的活动对象，即他们引用的都是同一个i。当循环执行完之后，i的值为10，所以每个函数都返回10。  </span></span><br><span class="line"><span class="string">  改进版  </span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>js</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    res[i] = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = a()</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>多加了一个带参的匿名函数，由于函数参数是按值传递的，所以会将i复制给num，这样闭包返回的值都是不同的。  </p>
<ul>
<li>关于this对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'The Window'</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">' My object'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">//My object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name <span class="comment">//The Window</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>匿名函数的执行环境具有全局性，this通常指向window。<br>改进<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'The Window'</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">' My object'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);<span class="comment">//My object</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name <span class="comment">//My object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用that或者_this保存下this的值,亦或者使用箭头函数。  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'The Window'</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">' My object'</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>模仿块级作用域</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>190页 单例模式 </p>
</li>
<li>现在想想 回调函数真jb骚<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(b)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">主要意思就是将一个函数作为参数传给主函数，主函数执行完毕执行回调函数，这个过程主函数可以传递参数给回调函数，然后回调函数就能拿到主函数执行完毕的一些变量。  </span></span><br><span class="line"><span class="string">回调函数也是闭包，我们通常使用一般不会特地声明回调函数，而是直接调用主函数然后传一个匿名参数做回调函数，回调函数拿到的参数必定是主函数执行完毕的值。也就是说使用回调函数相当于先执行完主函数。  </span></span><br><span class="line"><span class="string">### BOM</span></span><br><span class="line"><span class="string">#### window对象</span></span><br><span class="line"><span class="string">- 每个frame都有自己的window对象 可以使用window.frames[]或者top. parent.方式来访问每个frame的window对象</span></span><br><span class="line"><span class="string">- 窗口位置</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft === <span class="string">"number"</span>) ? <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</span><br><span class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop === <span class="string">"number"</span>) ? <span class="built_in">window</span>.screenTop : <span class="built_in">window</span>.screenY;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>moveTo moveBy 这种js控制浏览器的方法好多浏览器已经禁用，好像IE可能有用</p>
<ul>
<li><p>窗口大小<br>由于浏览器之间的各个差异，因此最终虽然无法确定浏览器窗口本身大小，不过可以取得页面视口的大小</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth;</span><br><span class="line"><span class="keyword">var</span> pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth !== <span class="string">"number"</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"CSS1Compat"</span>) &#123;</span><br><span class="line">    pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pageWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">    pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导航和打开窗口</p>
<ol>
<li><code>window.open()</code>返回一个指向新窗口的引用。调用<code>window.close()</code>可以关闭打开的窗口。</li>
<li>opener属性指向打开窗口的原始窗口</li>
</ol>
</li>
<li><p>间歇调用和超时调用<br>setTimeout 尽量传函数而不是字符串，为了避免性能的损耗。<br>使用setTimeout经过指定时间代码不一定会执行。  </p>
<blockquote>
<p>js是一个单线程的解释器，因此一定时间内只能执行一段代码。为了控制要执行的代码，就有一个js的任务队列。这些任务会按照将它们添加到队列的顺序执行。setTimeout的第二个为时间的参数是告诉js再过多长时间将当前任务添加到队列，如果队列是空的那么代码立即执行，如果队列不是空的需要等前面任务执行完了以后再执行。</p>
</blockquote>
<p>换句话说就是setTimeout指定时间之后将任务添加到队列末尾。<br>不建议在开发环境使用setInterval 而是使用setTimeout模拟。</p>
</li>
<li>系统对话框<ul>
<li>confirm返回一个boolean true代表按了确认 false则是取消或者x</li>
<li>prompt 两个参数 一个是提示 一个是输入框默认值 返回用户输入或者null</li>
<li>还有查找和打印两个异步对话框 window.find() window.print()<h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4>location对象既是window对象的属性，也是document对象的属性。<br>location的几个属性<br>hash返回url的hash、host返回服务器名称和端口号、hostname 服务器名称、href 完整url、pathname 返回url文件目录名、port 服务器端口、protocol返回页面使用协议、search 返回url查询字符串<h4 id="navigator对象和screen对象"><a href="#navigator对象和screen对象" class="headerlink" title="navigator对象和screen对象"></a>navigator对象和screen对象</h4>navigator对象包含了浏览器相关的信息<br>screen对象包含了屏幕显示相关的信息，但是一般不敢使用screen的宽高来设置元素<h3 id="客户端检测-暂且跳过"><a href="#客户端检测-暂且跳过" class="headerlink" title="客户端检测 暂且跳过"></a>客户端检测 暂且跳过</h3><a href="https://blog.csdn.net/kongjiea/article/details/17612899" target="_blank" rel="noopener">js判断客户端是pc端还是移动端</a><h3 id="DOM-★★★"><a href="#DOM-★★★" class="headerlink" title="DOM ★★★"></a>DOM ★★★</h3>document对象是HTMLDocument的一个实例，表示整个HTML页面。而且，document对象是window对象的一个属性，因此可以将其作为全局对象来访问。<br>documentElement属性指向html元素，body属性指向body元素。<h4 id="利用document取得文档信息"><a href="#利用document取得文档信息" class="headerlink" title="利用document取得文档信息"></a>利用document取得文档信息</h4></li>
</ul>
</li>
<li>document.title 取得title标签的信息并且可以修改</li>
<li>document.URL 包含完整的URL信息</li>
<li>document.domain 取得页面的域名</li>
<li>document.referrer 取得页面的来源页</li>
<li>以上信息都存于http头部</li>
<li>document.write 具有写入页面的能力<h4 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h4>获取到元素之后 它的属性一般直接点出来就可以 也可以通过点进行赋值。  但是自定义属性没法点出来 可以使用<code>getAttribute()</code>取得,还有<code>setAttribute()</code> <code>removeAttribute()</code>等方法。<br>一般不使用getAttribute方式，因为还有style和onclick等方式取得的是对象。<br>Text类型  </li>
<li>例如div.firstChild取得 然后使用nodeValue修改  </li>
</ul>
<p>DOM操作技术</p>
<ul>
<li>动态加载的js代码能立即执行</li>
</ul>
<h3 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a>DOM扩展</h3><p>js现在已经原生支持使用css选择符选择元素 <code>querySelector</code> <code>querySelectAll</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div2 = <span class="built_in">document</span>.querySelector(<span class="string">'#divc'</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="与类相关的扩展"><a href="#与类相关的扩展" class="headerlink" title="与类相关的扩展"></a>与类相关的扩展</h4><p><code>getElementsByClassName</code>返回一个nodelist。<br><code>classList</code>属性 返回一个元素的class数组，然后附带有remove、add<br>、toggle、contains(是否包含)等方法。<br><code>document.activeElement</code>获取文档中获得焦点的元素,hasFocus()方法判断文档是否有焦点。<br><code>children</code>获取节点的子元素 <code>contains</code>方法判断是否是节点的子节点。  </p>
<h3 id="DOM2和DOM3"><a href="#DOM2和DOM3" class="headerlink" title="DOM2和DOM3"></a>DOM2和DOM3</h3><p>变化有点看不大懂 先pass  </p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>.style方式改变样式时，float改成cssFloat IE下则是styleFloat<br>获取样式表样式 <code>getComputedStyle(document.getElementById(&#39;wrap&#39;))</code> <code>currentStyle</code> </p>
<ul>
<li>偏移量<br>offsetHeight 元素垂直方向上的空间大小 以像素记 包括元素高度 水平滚动条高度 上下边框高度<br>offsetWidth 包括元素宽度 垂直滚动条宽度 左右边框<br>offsetLeft 元素左边框至包含元素左边框距离<br>offsetTop 元素上边框至包含元素上边框距离  </li>
<li>客户区大小<br>clientHeight 元素内容高度加上上下内边距高度<br>clientWidth 元素内容宽度加上左右内边距宽度<h4 id="DOM范围-暂时略过"><a href="#DOM范围-暂时略过" class="headerlink" title="DOM范围 暂时略过"></a>DOM范围 暂时略过</h4></li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件分为两种：事件冒泡和事件捕获<br>DOM事件流：现在的DOM事件流是先捕获再冒泡<br>一种事件处理程序是直接在html上面使用on方式  </p>
<ul>
<li>第一个缺点 由于事件绑定在元素上 因此若是函数不具备执行条件然后被触发 会导致报错 </li>
<li>第二个缺点 扩展事件处理程序的作用域链在不同浏览器中会导致不同结果 </li>
<li>html和js代码耦合度高<br>DOM 0级事件处理程序 </li>
<li>简单 跨浏览器 取得一个元素的引用 然后 <code>btn.onclick = function(){}</code> 函数里的this引用的是这个元素的属性和方法  <h4 id="DOM-2级事件处理程序"><a href="#DOM-2级事件处理程序" class="headerlink" title="DOM 2级事件处理程序"></a>DOM 2级事件处理程序</h4>DOM2级事件处理程序使用<code>addEventListener()</code>和<code>removeEventListener()</code>。所有DOM节点中都包含这两个方法，并且它们都接受三个参数：要处理的事件名，事件处理程序函数和一个布尔值。布尔值为true表示捕获阶段调用事件处理程序，false代表冒泡阶段调用事件处理程序。<br>removeEventListener要移除事件，必须要是命名函数，使用匿名函数方式绑定的事件无法使用remove移除。<br>不建议在捕获阶段添加事件处理程序。<br><code>event.preventDefault()</code>用来阻止特定事件的默认行为。<br><code>event.stopPropagation()</code>用来阻止元素继续冒泡。  <h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><h5 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h5></li>
<li>DOMActivate 表示元素被用户激活 ff和chrome支持</li>
<li>load事件 页面完全加载完在window上触发 所有框架都加载完毕在框架集上触发 图像加载完毕在img元素触发 嵌入的内容加载完毕在object上触发<br>怪不得要求onload写在赋值src属性之前，因为一旦设置src就会开始下载   如果是把onload写在src后面 有微小的可能性不触发onload<br>而script标签则需要src和添加到文档一起设置才会开始下载</li>
<li>unload 同上 当卸载后触发</li>
<li>abort 停止下载过程中 如果嵌入内容没有加载完 在object上面触发</li>
<li>error 同load 发生错误时触发</li>
<li>select 选择文本框中的一个或者多个字符时触发</li>
<li>resize 窗口或者框架大小发生变化时 在window或者框架上面触发此方法<br>触发的挺频繁  </li>
<li>scroll 滚动带有滚动条的元素内容时触发  </li>
</ul>
<h5 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h5><ul>
<li>blur失去焦点时触发</li>
<li>focus获得焦点时触发 focusout冒泡</li>
<li>focusin获得焦点触发 冒泡<h5 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h5>鼠标有9个事件</li>
<li>click </li>
<li>dbclick</li>
<li>mousedown 不能通过键盘触发</li>
<li>mouseenter 不冒泡 不能通过子元素触发</li>
<li>mouseleave</li>
<li>mousemove </li>
<li>mouseout 可以子元素触发</li>
<li>mouseup 松开鼠标触发</li>
<li>clientX和clientY表示鼠标 触发时的视口位置</li>
<li>pageX和pageY代表 鼠标页面位置</li>
<li>screenX和screenY表示 鼠标触发屏幕位置</li>
<li>shift ctrl alt cmd能影响鼠标事件 因此有四个布尔值表示是否按下  shiftKey ctrlKey altKey metaKey  </li>
<li>mousedown和mouseup有个button属性 0鼠标左键 1鼠标滚动 2鼠标右键</li>
<li>event还有点击多少次 属性</li>
<li>offsetX offsetY距离目标元素边界值</li>
<li>滚轮事件</li>
<li>mousewheel  wheelDelta 向前滚120倍数 向后滚-120倍数<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5></li>
<li>keydown keypress keyup </li>
<li>textInput事件 输入文本框之前触发</li>
<li>charCode 键码</li>
<li>后来变成了key和char</li>
<li>location属性 代表按下键盘那个位置 4代表虚拟键盘<h5 id="DOM变动事件"><a href="#DOM变动事件" class="headerlink" title="DOM变动事件"></a>DOM变动事件</h5></li>
<li>DOMSubtreeModified 监听DOM变动的事件</li>
<li>DOMNodeInserted 一个节点被作为子节点插入到另一个节点时触发</li>
<li>DOMNodeRemoved 节点从父节点中移除时触发</li>
<li>DOMNodeInsertedIntoDocument 节点插入文档或者通过子树插入到文档触发</li>
<li>DOMNodeRemoveFromDocument</li>
<li>DOMAttrModified 特性被修改时触发</li>
<li>DOMCharacterDataModified文本节点的值发生变化时触发<h5 id="各种页面事件还有很多啊"><a href="#各种页面事件还有很多啊" class="headerlink" title="各种页面事件还有很多啊"></a>各种页面事件还有很多啊</h5><h5 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h5></li>
<li>touchstart touchmove touchend 多了rotate scale属性<h5 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h5>事件委托就是在最外面冒泡的元素上面进行事件程序处理，这样就相当于只挂载一次事件处理程序，然后根据target元素来判断具体响应事件。好处是节约了内存，提高了性能，对象很快就可以访问 设置事件绑定也快了很多。<h5 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h5>不用的时候移除事件处理程序也是提高性能的一种方式，不过由于现代浏览器优良的性能，笔记这附近几种方法一般采用的比较少了。占用浏览器资源较多的一个方面主要是DOM的操作，因此减少重绘重拍等方式显得还是比较重要的。<h5 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h5>js可以模拟DOM事件，并与真的DOM事件一样使用 但是 需要传入大量的事件参数。。<h4 id="自定义事件-★★★★★"><a href="#自定义事件-★★★★★" class="headerlink" title="自定义事件 ★★★★★"></a>自定义事件 ★★★★★</h4>手写一个观察者模式的事件  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers = []</span><br><span class="line">&#125;</span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">  addHandler: function (type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[type] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用push的意思是同一种事件可以添加多个监听方法</span></span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断事件类型有没有被绑定</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handlers.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 循环执行绑定的方法 并传入event参数</span></span><br><span class="line">        handlers[i](event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[type]</span><br><span class="line">      <span class="comment">// 循环判断同事件的方法 然后删除</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; handlers.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      handlers.splice(i, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Message received: '</span> + event.message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> EventTarget()</span><br><span class="line">target.addHandler(<span class="string">'message'</span>, handleMessage)</span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br><span class="line"></span><br><span class="line">target.fire(&#123;</span><br><span class="line">  type: <span class="string">'message'</span>,</span><br><span class="line">  message: <span class="string">"Hello World!"</span></span><br><span class="line">&#125;)</span><br><span class="line">target.removeHandler(<span class="string">'message'</span>, handleMessage)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="表单脚本"><a href="#表单脚本" class="headerlink" title="表单脚本"></a>表单脚本</h3><p>基本表单常用方法和操作 详见红宝书420页</p>
<h4 id="操作剪贴板"><a href="#操作剪贴板" class="headerlink" title="操作剪贴板"></a>操作剪贴板</h4><ul>
<li>beforecopy 发生复制操作前触发</li>
<li>copy 发生复制操作时触发</li>
<li>beforecut 发生剪切操作前触发</li>
<li>cut 发生剪切操作时触发</li>
<li>beforepaste 发生粘贴操作前触发</li>
<li>paste 发生粘贴操作时触发<br>可以使用clipboardData对象访问剪切板数据 chrome中此对象存在于event对象中<br>这个对象有三个方法 getData() setData() clearData()  <h4 id="富文本-比较nb的-先过"><a href="#富文本-比较nb的-先过" class="headerlink" title="富文本 比较nb的 先过"></a>富文本 比较nb的 先过</h4><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3>getContext() 取得绘图上下文对象<br>绘制矩形  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'canvas'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> ctx = cas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">ctx.fillStyle = <span class="string">'#ff0000'</span></span><br><span class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">ctx.fillStyle = <span class="string">'rgba(0,0,255,0.5)'</span></span><br><span class="line">ctx.fillRect(<span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">ctx.clearRect(<span class="number">40</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>canvas能绘制圆、矩形、线 能绘制路径 设置线的样式 图形样式 能增加渐变 能旋转 缩放<br> 不过问题是 旋转 缩放等变换是对ctx而不是某个图形进行的操作<br> getImgaeData() 取得原始图像数据 并且能对数据的元素点进行操作<br>isPointInPath方法必须要用路径画 用drawimg 并不行  </p>
<h4 id="webGL提供了一些操作字节级别的方法"><a href="#webGL提供了一些操作字节级别的方法" class="headerlink" title="webGL提供了一些操作字节级别的方法"></a>webGL提供了一些操作字节级别的方法</h4><h3 id="HTML5脚本编程"><a href="#HTML5脚本编程" class="headerlink" title="HTML5脚本编程"></a>HTML5脚本编程</h3><p>postMessage方法能进行frame之间的通讯  </p>
<h4 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h4><p>emmm 做一个拖动好麻烦啊<br><a href="http://www.zhangxinxu.com/wordpress/2011/02/html5-drag-drop-%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">张鑫旭拖动</a><br>赶时间 pass</p>
<h3 id="ajax-XMLHttpRequest"><a href="#ajax-XMLHttpRequest" class="headerlink" title="ajax XMLHttpRequest"></a>ajax XMLHttpRequest</h3><p>手写ajax实现  </p>
<pre><code class="js"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()
xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) {
    <span class="keyword">if</span> (xhr.status === <span class="number">200</span> || xhr.status === <span class="number">304</span>) {
      <span class="built_in">console</span>.log(xhr.responseText);

    }
  }
})
<span class="keyword">var</span> url =
  <span class="string">'https://route.showapi.com/341-1?maxResult=20&amp;page=1&amp;showapi_appid=18393&amp;showapi_test_draft=false&amp;showapi_timestamp=20180605172845&amp;showapi_sign=1904d4ca2680fc3ad9e5922856e44803'</span>
xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)
xhr.send(<span class="literal">null</span>)
<span class="comment">//xhr.abort() //取消异步请求</span>
</code></pre>
<p>监听事件放在前面是为了兼容性。<br><code>xhr.setRequestHeader(&quot;MyHeader&quot;,&quot;MyValue&quot;)</code>方法修改头部信息。<br>get请求除了直接地址拼接参数之外，也可以使用addURLParam()方法添加参数 <code>url = addURLParam(url,&quot;name&quot;,&quot;Nick&quot;)</code><br>使用FormData提交表单数据  </p>
<pre><code class="js"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData()
data.append(<span class="string">'name'</span>,<span class="string">'nick'</span>)
</code></pre>
<p>xhr的请求超时<br><code>xhr.timeout = 10000</code><br><code>xhr.ontimeout = function(){}</code><br>progress事件监听请求进度<br>lengthComputable 表示进度信息是否可用的布尔值<br>position 表示已经接收的字节数<br>totalSize表示根据content-length响应头部确定的预期字节数    </p>
<h4 id="websocket-并不难"><a href="#websocket-并不难" class="headerlink" title="websocket 并不难"></a>websocket 并不难</h4><p><a href="http://www.cnblogs.com/stoneniqiu/p/5402311.html" target="_blank" rel="noopener">node+html 实现websocket</a>  </p>
<h3 id="js高级技巧"><a href="#js高级技巧" class="headerlink" title="js高级技巧"></a>js高级技巧</h3><p>P598</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
